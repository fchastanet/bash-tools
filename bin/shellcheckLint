#!/usr/bin/env bash

#####################################
# GENERATED FILE FROM src/Linters/shellcheckLint.sh
# DO NOT EDIT IT
#####################################

# shellcheck disable=SC2034
SCRIPT_NAME=${0##*/}
# shellcheck disable=SC2034
CURRENT_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
BIN_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
ROOT_DIR="$(cd "${BIN_DIR}/.." && pwd -P)"
# shellcheck disable=SC2034
SRC_DIR="${ROOT_DIR}/src"
# shellcheck disable=SC2034
VENDOR_DIR="${ROOT_DIR}/vendor"
# shellcheck disable=SC2034
VENDOR_BIN_DIR="${ROOT_DIR}/vendor/bin"
export PATH="${BIN_DIR}":"${VENDOR_BIN_DIR}":${PATH}

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  rm -Rf "${TMPDIR}" >/dev/null 2>&1
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT

# shellcheck disable=SC2034
((failures = 0)) || true

shopt -s expand_aliases

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

export TERM=xterm-256color

#avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# FUNCTIONS

# Retry a command several times depending on parameters
# @param {int}    $1 max retries
# @param {int}    $2 delay between attempt
# @param {String} $3 message to display to describe the attempt
# @param ...      $@ rest of parameters, the command to run
# @return 0 on success, 1 if max retries count reached
Retry::parameterized() {
  local maxRetries=$1
  shift || true
  local delayBetweenTries=$1
  shift || true
  local message="$1"
  shift || true
  local retriesCount=1
  while true; do
    Log::displayInfo "Attempt ${retriesCount}/${maxRetries}: ${message}"
    if "$@"; then
      break
    elif [[ ${retriesCount} -le ${maxRetries} ]]; then
      Log::displayWarning "Command failed. Wait for ${delayBetweenTries} seconds"
      ((retriesCount++))
      sleep "${delayBetweenTries}"
    else
      Log::displayError "The command has failed after ${retriesCount} attempts."
      return 1
    fi
  done
  return 0
}

# extract version number from github api
# @stdin json result of github API
Version::githubApiExtractVersion() {
  jq -r ".tag_name" | Version::parse
}

# Public: check if command specified exists or return 1
# with error and message if not
#
# **Arguments**:
# * $1 commandName on which existence must be checked
# * $2 helpIfNotExists a help command to display if the command does not exist
#
# **Exit**: code 1 if the command specified does not exist
Assert::commandExists() {
  local commandName="$1"
  local helpIfNotExists="$2"

  Log::displayInfo "check ${commandName} installed"
  command -v "${commandName}" >/dev/null 2>/dev/null || {
    Log::displayError "${commandName} is not installed, please install it"
    if [[ -n "${helpIfNotExists}" ]]; then
      Log::displayInfo "${helpIfNotExists}"
    fi
    return 1
  }
  return 0
}

Github::defaultInstall() {
  local newSoftware="$1"
  local targetFile="$2"
  local version="$3"
  local installCallback=$4
  # shellcheck disable=SC2086
  mkdir -p "$(dirname "${targetFile}")"
  if [[ "$(type -t "${installCallback}")" = "function" ]]; then
    ${installCallback} "${newSoftware}" "${targetFile}" "${version}"
  else
    mv "${newSoftware}" "${targetFile}"
  fi
  chmod +x "${targetFile}"
  hash -r
  rm -f "${newSoftware}" || true
}

# github repository eg: kubernetes-sigs/kind
# @param {String} githubUrl eg: https://github.com/kubernetes-sigs/kind/releases/download/@latestVersion@/kind-linux-amd64
Github::extractRepoFromGithubUrl() {
  local githubUrl="$1"
  echo "${githubUrl}" | sed -E 's#^https://github.com/([^/]+)/([^/]+)/.*$#\1/\2#'
}

# Retrieve the latest version number of a github release using Github API using retry
# @param {String} $1 repository in the format fchastanet/bash-tools
#   that would match https://github.com/fchastanet/bash-tools
# @param {String} $2 reference to a variable that will contain the result of the command
# @output log messages about retry
Github::getLatestRelease() {
  local repo="$1"
  # we need to pass the result through a reference instead of output directly
  # because retry can output too
  local -n resultRef=$2
  resultRef=""
  local resultFile
  resultFile="$(mktemp -p "${TMPDIR:-/tmp}" -t githubLatestRelease.XXXX)"
  # Get latest release from GitHub api
  if Retry::default curl \
    -o "${resultFile}" \
    --fail \
    --silent \
    "https://api.github.com/repos/${repo}/releases/latest"; then
    # shellcheck disable=SC2034
    resultRef="$(Version::githubApiExtractVersion <"${resultFile}")"
  fi
  rm -f "${resultFile}"
}

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export readonly __ERROR_COLOR='\e[31m'      # Red
  export readonly __INFO_COLOR='\e[44m'       # white on lightBlue
  export readonly __SUCCESS_COLOR='\e[32m'    # Green
  export readonly __WARNING_COLOR='\e[33m'    # Yellow
  export readonly __SKIPPED_COLOR='\e[93m'    # Light Yellow
  export readonly __TEST_COLOR='\e[100m'      # Light magenta
  export readonly __TEST_ERROR_COLOR='\e[41m' # white on red
  export readonly __SKIPPED_COLOR='\e[33m'    # Yellow
  export readonly __DEBUG_COLOR='\e[37m'      # Grey
  # Internal: reset color
  export readonly __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  export readonly __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  export readonly __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  export readonly __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export readonly __ERROR_COLOR=''
  export readonly __INFO_COLOR=''
  export readonly __SUCCESS_COLOR=''
  export readonly __WARNING_COLOR=''
  export readonly __SKIPPED_COLOR=''
  export readonly __TEST_COLOR=''
  export readonly __TEST_ERROR_COLOR=''
  export readonly __SKIPPED_COLOR=''
  export readonly __DEBUG_COLOR=''
  # Internal: reset color
  export readonly __RESET_COLOR=''
  export readonly __HELP_EXAMPLE=''
  export readonly __HELP_TITLE=''
  export readonly __HELP_NORMAL=''
fi

# Display message using debug color (grey)
# @param {String} $1 message
Log::displayDebug() {
  echo -e "${__DEBUG_COLOR}DEBUG   - ${1}${__RESET_COLOR}" >&2
}

# Display message using error color (red)
# @param {String} $1 message
Log::displayError() {
  echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}" >&2
}

# Display message using info color (bg light blue/fg white)
# @param {String} $1 message
Log::displayInfo() {
  echo -e "${__INFO_COLOR}INFO    - ${1}${__RESET_COLOR}" >&2
}

# Display message using warning color (yellow)
# @param {String} $1 message
Log::displayWarning() {
  echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}" >&2
}

# Retry a command 5 times with a delay of 15 seconds between each attempt
# @param          $@ the command to run
# @return 0 on success, 1 if max retries count reached
Retry::default() {
  Retry::parameterized 5 15 "" "$@"
}

# @param $1 version 1
# @param $2 version 2
# @return
#   0 if equal
#   1 if version1 > version2
#   2 else
Version::compare() {
  if [[ "$1" = "$2" ]]; then
    return 0
  fi
  local IFS=.
  # shellcheck disable=2206
  local i ver1=($1) ver2=($2)
  # fill empty fields in ver1 with zeros
  for ((i = ${#ver1[@]}; i < ${#ver2[@]}; i++)); do
    ver1[i]=0
  done
  for ((i = 0; i < ${#ver1[@]}; i++)); do
    if [[ -z "${ver2[i]+unset}" ]] || [[ -z ${ver2[i]} ]]; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]})); then
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]})); then
      return 2
    fi
  done
  return 0
}

# filter to keep only version number from a string
# @stdin the string to parse
Version::parse() {
  sed -nre 's/[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p' | head -n1
}

# upgrade given binary to latest github release using retry
# @param {String}   targetFile target binary file (eg: /usr/local/bin/kind)
# @param {String}   releaseUrl github release url (eg: https://github.com/kubernetes-sigs/kind/releases/download/@latestVersion@/kind-linux-amd64)
#    the placeholder @latestVersion@ will be replaced by the latest release version
# @param {Function} versionCallback function called to get software version (default: Version::getCommandVersionFromPlainText will call software with argument --version)
# @param {Function} installCallback function called to install the file retrieved on github (default copy as is and set execution bit)
# @output log messages about retry, install, upgrade
Github::upgradeRelease() {
  local targetFile="$1"
  local releaseUrl="$2"
  local argVersion="${3:---version}"
  local versionCallback="${4:-Version::getCommandVersionFromPlainText}"
  # shellcheck disable=SC2034
  local installCallback="${5:-}"
  local latestVersion
  local repo

  set -x
  repo="$(Github::extractRepoFromGithubUrl "${releaseUrl}")"
  Github::getLatestRelease "${repo}" latestVersion
  Log::displayInfo "Repo ${repo} latest version found is ${latestVersion}"

  local currentVersion="not existing"
  if [[ -f "${targetFile}" ]]; then
    currentVersion="$(${versionCallback} "${targetFile}" "${argVersion}" 2>&1 || true)"
  fi
  if [[ "${currentVersion}" = "${latestVersion}" ]]; then
    Log::displayInfo "${targetFile} version ${latestVersion} already installed"
  else
    if [[ -z "${currentVersion}" ]]; then
      Log::displayInfo "Installing ${targetFile} with version ${latestVersion}"
    else
      Log::displayInfo "Upgrading ${targetFile} from version ${currentVersion} to ${latestVersion}"
    fi
    local url
    url="$(echo "${releaseUrl}" | sed -E "s/@latestVersion@/${latestVersion}/g")"
    Log::displayInfo "Using url ${url}"
    newSoftware=$(mktemp -p "${TMPDIR:-/tmp}" -t github.newSoftware.XXXX)
    Retry::default curl \
      -L \
      -o "${newSoftware}" \
      --fail \
      "${url}"

    Github::defaultInstall "${newSoftware}" "${targetFile}" "${latestVersion}" "${installCallback}"
  fi
}

# Check that command version is greater than expected minimal version
# display warning if command version greater than expected minimal version
# display error if command version less than expected minimal version and exit 1
# @param {String} $1 command path
# @param {String} $2 command line parameters to launch to get command version
# @param {String} $3 expected minimal command version
# @param {String} $4 optional help message to display if command does not exist
# @return 1 if command version less than expected minimal version, 0 otherwise
# @return 2 if command does not exist
Version::checkMinimal() {
  local commandName="$1"
  local argVersion="$2"
  local minimalVersion="$3"
  local parseVersionCallback=${4:-Version::parse}
  local help="${4:-}"

  Assert::commandExists "${commandName}" "${help}" || return 2

  local version
  version="$("${commandName}" "${argVersion}" 2>&1 | ${parseVersionCallback})"

  Log::displayDebug "check ${commandName} version ${version} against minimal ${minimalVersion}"

  Version::compare "${version}" "${minimalVersion}" || {
    local result=$?
    if [[ "${result}" = "1" ]]; then
      Log::displayWarning "${commandName} version is ${version} greater than ${minimalVersion}, OK let's continue"
    elif [[ "${result}" = "2" ]]; then
      Log::displayError "${commandName} minimal version is ${minimalVersion}, your version is ${version}"
      return 1
    fi
    return 0
  }

}

# extract software version number
# @param $1 the command that will be called with --version parameter
Version::getCommandVersionFromPlainText() {
  local command="$1"
  local argVersion="${2:---version}"
  "${command}" "${argVersion}" 2>&1 |
    Version::parse # keep only version numbers
}

# check if command in PATH is already the minimal version needed
if ! Version::checkMinimal "shellcheck" "--version" "0.8.0"; then
  install() {
    local file="$1"
    local targetFile="$2"
    local version="$3"
    local tempDir
    tempDir="$(mktemp -d -p "${TMPDIR:-/tmp}" -t bash-framework-shellcheck-$$-XXXXXX)"
    (
      cd "${tempDir}" || exit 1
      tar -xJvf "${file}"
      mv "shellcheck-v${version}/shellcheck" "${targetFile}"
      chmod +x "${targetFile}"
    )
  }
  Github::upgradeRelease \
    "${VENDOR_BIN_DIR}/shellcheck" \
    "https://github.com/koalaman/shellcheck/releases/download/v@latestVersion@/shellcheck-v@latestVersion@.linux.x86_64.tar.xz" \
    "--version" \
    Version::getCommandVersionFromPlainText \
    install
fi

if (($# == 0)); then
  set -- --check-sourced -x -f checkstyle
fi

(
  # shellcheck disable=SC2046
  LC_ALL=C.UTF-8 shellcheck "$@" \
    $(
      find . -type f -executable \
        -not -path './vendor/*' \
        -not -path './.git/*' \
        -not -path './megalinter-reports/*' \
        -not -path './bin/hadolint' \
        -not -path './bin/shellcheck' \
        -not -path './.docker/*' \
        -not -path './.history/*' \
        -not -path './tests/data/*' \
        -regextype posix-egrep \
        ! -regex '.*\.(awk)$'
    )
)
