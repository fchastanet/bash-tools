#!/usr/bin/env bash

CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# load bash-framework
# shellcheck source=bash-framework/_bootstrap.sh
source "$( cd "${CURRENT_DIR}/.." && pwd )/bash-framework/_bootstrap.sh"

Framework::expectNonRootUser

import bash-framework/Database
import bash-framework/Version
import bash-framework/File

# ensure that Ctrl-C is trapped by this script and not sub mysql process
trap 'exit 130' INT

# default values
SCRIPT_NAME=${0##*/}
PROFILE=""
FROM_DB=""
DEFAULT_FROM_DSN="default.remote"
FROM_DSN="${DEFAULT_FROM_DSN}"
RATIO=70
# remove last slash
PROFILES_DIR="$(cd "${CURRENT_DIR}/.." && pwd)/conf/dbImportProfiles"
HOME_PROFILES_DIR="${HOME}/.bash-tools/dbImportProfiles"

showHelp() {
local profilesList=""
local dsnList=""
dsnList="$(Functions::getConfMergedList "dsn" "env")"
profilesList="$(Functions::getConfMergedList "dbImportProfiles" "sh" || true)"

cat << EOF
${__HELP_TITLE}Description:${__HELP_NORMAL} generate optimized profiles to be used by dbImport

${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} --help prints this help and exits
${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} <fromDbName> 
                        [-p|--profile profileName] 
                        [-f|--from-dsn dsn]

    <fromDbName>                the name of the source/remote database
    -p|--profile profileName    the name of the profile to write in ${HOME_PROFILES_DIR} directory
        if not provided, the file name pattern will be 'auto_<dsn>_<fromDbName>.sh'
    -f|--from-dsn dsn           dsn to use for source database (Default: ${DEFAULT_FROM_DSN})
    -r|--ratio ratio            define the ratio to use (0 to 100% - default 70)
        0 means profile will filter out all the tables
        100 means profile will keep all the tables
        eg: 70 means that table size (table+index) > 70%*max table size will be excluded

${__HELP_TITLE}List of available profiles (default profiles dir ${PROFILES_DIR} overridable in home profiles ${HOME_PROFILES_DIR}):${__HELP_NORMAL}
${profilesList}
${__HELP_TITLE}List of available dsn:${__HELP_NORMAL}
${dsnList}
EOF
}

# read command parameters
# $@ is all command line parameters passed to the script.
# -o is for short options like -h
# -l is for long options with double dash like --help
# the comma separates different long options
options=$(getopt -l help,profile:,from-dsn:,ratio: -o hf:p:r: -- "$@" 2> /dev/null) || {
    showHelp
    Log::fatal "invalid options specified"
}

eval set -- "${options}"
while true
do
case $1 in
-h|--help)
    showHelp
    exit 0
    ;;
-f|--from-dsn)
    shift || true 
    FROM_DSN="${1:-${DEFAULT_FROM_DSN}}"
    ;;
-p|--profile)
    shift || true 
    PROFILE="$1"
    ;;
-r|--ratio)
    shift || true 
    RATIO="$1"
    ;;
--)
    shift || true
    break;;
*)
    showHelp
    Log::fatal "invalid argument $1"
esac
shift || true
done

# check dependencies
Functions::checkCommandExists mysql "sudo apt-get install -y mysql-client"
Functions::checkCommandExists mysqlshow "sudo apt-get install -y mysql-client"
# additional arguments
shift $(( OPTIND - 1 )) || true
FROM_DB="$1"
shift || true
if (( $# > 0 )); then
    Log::fatal "too much arguments provided"
fi

if [[ -z "${FROM_DB}" ]]; then
    Log::fatal "you must provide fromDbName"
fi

if [[ -z "${PROFILE}" ]]; then
    PROFILE="auto_${FROM_DSN}_${FROM_DB}.sh"
fi

if ! [[ "${RATIO}" =~ ^-?[0-9]+$ ]] ; then
    Log::fatal "Ratio value should be a number"
fi

if (( RATIO < 0 || RATIO > 100)); then
    Log::fatal "Ratio value should be between 0 and 100"
fi

# create db instance
declare -Agx dbFromInstance

Database::newInstance dbFromInstance "${FROM_DSN}"
Database::setQueryOptions dbFromInstance "${dbFromInstance[QUERY_OPTIONS]} --connect-timeout=5"
Log::displayInfo "Using from dsn ${dbFromInstance['DSN_FILE']}"

# check if from db exists
Database::ifDbExists dbFromInstance "${FROM_DB}" || {
    Log::fatal "From Database ${FROM_DB} does not exist !"
}
read -r -d '' QUERY << EOM2 || true
SELECT	
	TABLE_NAME AS tableName, 
	ROUND((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024) as maxSize
FROM information_schema.TABLES
WHERE 
	TABLE_SCHEMA = '${FROM_DB}'
    AND TABLE_TYPE NOT IN('VIEW')
ORDER BY maxSize DESC
EOM2
TABLE_LIST="$(Database::query dbFromInstance "${QUERY}" "information_schema")"
# first table is the biggest one 
MAX_TABLE_SIZE="$(echo "${TABLE_LIST}" | head -1 | awk -F ' ' '{print $2}')"
(
    echo "#!/usr/bin/env bash"
    echo
    echo "# cat represents the whole list of tables"
    echo "cat |"
    (( excludedTablesCount=0 )) || true
    while IFS="" read -r line || [[ -n $line ]];
    do
        TABLE_SIZE="$(echo "${line}" | awk -F ' ' '{print $2}')"
        TABLE_NAME="$(echo "${line}" | awk -F ' ' '{print $1}')"
        if (( TABLE_SIZE < MAX_TABLE_SIZE * RATIO/100 )); then
            echo -n '#'
        else
            excludedTablesCount=$(( excludedTablesCount+1 ))
        fi
        echo "   grep -v '^${TABLE_NAME}$' | # table size ${TABLE_SIZE}MB"        
    done < <(echo "${TABLE_LIST}")
    echo "cat"
    tablesCount="$(echo "${TABLE_LIST}" | wc -l)"
    Log::displayInfo "Profile generated - ${excludedTablesCount}/${tablesCount} tables bigger than ${RATIO}% of max table size (${MAX_TABLE_SIZE}MB) automatically excluded"
) > "${HOME_PROFILES_DIR}/${PROFILE}"

Log::displayInfo "File saved in '${HOME_PROFILES_DIR}/${PROFILE}'"