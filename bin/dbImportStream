#!/usr/bin/env bash

#####################################
# GENERATED FILE FROM src/DbImport/dbImportStream.sh
# DO NOT EDIT IT
#####################################

# shellcheck disable=SC2034
SCRIPT_NAME=${0##*/}
# shellcheck disable=SC2034
CURRENT_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
BIN_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
ROOT_DIR="$(cd "${BIN_DIR}/.." && pwd -P)"
# shellcheck disable=SC2034
SRC_DIR="${ROOT_DIR}/src"
# shellcheck disable=SC2034
VENDOR_DIR="${ROOT_DIR}/vendor"
# shellcheck disable=SC2034
VENDOR_BIN_DIR="${ROOT_DIR}/vendor/bin"
export PATH="${BIN_DIR}":"${VENDOR_BIN_DIR}":${PATH}

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  rm -Rf "${TMPDIR}" >/dev/null 2>&1
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT

# shellcheck disable=SC2034
((failures = 0)) || true

shopt -s expand_aliases

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

export TERM=xterm-256color

#avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# FUNCTIONS

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  readonly __ERROR_COLOR='\e[31m'      # Red
  readonly __INFO_COLOR='\e[44m'       # white on lightBlue
  readonly __SUCCESS_COLOR='\e[32m'    # Green
  readonly __WARNING_COLOR='\e[33m'    # Yellow
  readonly __TEST_COLOR='\e[100m'      # Light magenta
  readonly __TEST_ERROR_COLOR='\e[41m' # white on red
  readonly __SKIPPED_COLOR='\e[33m'    # Yellow
  readonly __DEBUG_COLOR='\e[37m'      # Grey
  # Internal: reset color
  readonly __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  readonly __ERROR_COLOR=''
  readonly __INFO_COLOR=''
  readonly __SUCCESS_COLOR=''
  readonly __WARNING_COLOR=''
  readonly __SKIPPED_COLOR=''
  readonly __TEST_COLOR=''
  readonly __TEST_ERROR_COLOR=''
  readonly __DEBUG_COLOR=''
  # Internal: reset color
  readonly __RESET_COLOR=''
  readonly __HELP_EXAMPLE=''
  readonly __HELP_TITLE=''
  readonly __HELP_NORMAL=''
fi
export __ERROR_COLOR
export __INFO_COLOR
export __SUCCESS_COLOR
export __WARNING_COLOR
export __SKIPPED_COLOR
export __TEST_COLOR
export __TEST_ERROR_COLOR
export __SKIPPED_COLOR
export __DEBUG_COLOR
export __RESET_COLOR
export __HELP_EXAMPLE
export __HELP_TITLE
export __HELP_NORMAL

# Display message using error color (red) and exit immediately with error status 1
# @param {String} $1 message
Log::fatal() {
  echo -e "${__ERROR_COLOR}FATAL   - ${1}${__RESET_COLOR}" >&2
  exit 1
}

DUMP_FILE="$1"
DB_NAME="$2"
PROFILE_COMMAND="${3}"
MYSQL_AUTH_FILE="${4}"
CHARACTER_SET="${5:-utf8}"
DB_IMPORT_OPTIONS="${6:-}"

if [[ -z "${PROFILE_COMMAND}" ]]; then
  Log::fatal "You should provide a profile command"
fi

awkScript="$(
  cat <<'EOF'
BEGIN{
  write=1
}
{
  buffer = substr($0, 1, 150)
  line = $0
  if(match(buffer, /^LOCK TABLES `([^`]+)` WRITE;$/, arr) != 0) {
    # check if inserts are part of the profile
    tableName=arr[1]
    if (! (tableName in map)) {
      profileCmd = "echo '" tableName "' | " PROFILE_COMMAND " | grep -q " tableName
      map[tableName] = (system(profileCmd) == 0)
    }
    if (map[tableName]) {
      print "\033[44m" "begin insert " tableName "\033[0m"  > "/dev/stderr"
      line = line "\nTRUNCATE TABLE `" tableName "`;"
      write=1
    } else {
      print "ignore table " tableName  > "/dev/stderr"
      write=0
    }
  } else if(match(buffer, /^commit;$/, arr) != 0) {
    write=1
  } else if(match(buffer, /SET NAMES ([^ ]+)/, arr) != 0) {
    if (CHARACTER_SET != "") {
      sub(/SET NAMES ([^ ]+)/, "SET NAMES " CHARACTER_SET, line)
    }
    write=1
  } else if(match(buffer, /SET character_set_client = ([^ ]+)/, arr) != 0 && substr(arr[1], 0, 1) != "@") {
    if (CHARACTER_SET != "") {
      sub(/SET character_set_client = ([^ ]+)/, "SET character_set_client = " CHARACTER_SET, line)
    }
    write=1
  }

  if (write == 1) {
    print line
  }
}
EOF
)"
# shellcheck disable=2086
(
  if [[ "${DUMP_FILE}" == *tar.gz ]]; then
    tar xOfz "${DUMP_FILE}"
  elif [[ "${DUMP_FILE}" == *.gz ]]; then
    zcat "${DUMP_FILE}"
  fi
  # zcat will continue to write to stdout whereas awk has finished if table has been found
  # we detect this case because zcat will return code 141 because pipe closed
  status=$?
  if [[ "${status}" -eq "141" ]]; then true; else exit "${status}"; fi
) | awk \
  -v PROFILE_COMMAND="${PROFILE_COMMAND}" \
  -v CHARACTER_SET="${CHARACTER_SET}" \
  --source "${awkScript}" \
  - | mysql --defaults-extra-file="${MYSQL_AUTH_FILE}" ${DB_IMPORT_OPTIONS} "${DB_NAME}" || exit $?
