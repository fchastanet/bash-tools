#!/usr/bin/env bash

CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# load bash-framework
# shellcheck source=bash-framework/_bootstrap.sh
source "$( cd "${CURRENT_DIR}/.." && pwd )/bash-framework/_bootstrap.sh"

import bash-framework/Log

Framework::expectNonRootUser

# ensure that Ctrl-C is trapped by this script
trap 'exit 130' INT

SCRIPT_NAME=${0##*/}
CLI_PROFILE_DEFAULT=
CLI_PROFILE_DEFAULT="$(cd "${CURRENT_DIR}/.." && pwd)/conf/cliProfile/default.sh"
CLI_PROFILE_HOME="${HOME}/.bash-tools/cliProfile/default.sh"

showHelp() {
local containers
containers=$(docker ps --format '{{.Names}}'| sed -E 's/[^-]+-(.*)/\1/'| paste -sd "," -)
cat << EOF
    Description: easy connection to docker container

    Command: ${SCRIPT_NAME} [-h|--help] prints this help and exits
    Command: ${SCRIPT_NAME} <container> [user] [command]

    <container> : container should be one of these values : ${containers}

    examples:
    to connect to mysql container in bash mode with user mysql
        ${SCRIPT_NAME} mysql mysql "//bin/bash"
    to connect to web container with user root
        ${SCRIPT_NAME} web root

    these mappings are provided by default using ${CLI_PROFILE_DEFAULT}
    you can override these mappings by providing your own profile in ${CLI_PROFILE_HOME}
    
    This script will be executed with the variables userArg containerArg commandArg set as specified in command line
    and should provide value for the following variables finalUserArg finalContainerArg finalCommandArg
EOF
}

# read command parameters
# $@ is all command line parameters passed to the script.
# -o is for short options like -h
# -l is for long options with double dash like --help
# the comma separates different long options
options=$(getopt -l help -o h -- "$@" 2> /dev/null) || {
    showHelp
    Log::fatal "invalid options specified"
}

eval set -- "${options}"
while true
do
case $1 in
-h|--help)
    showHelp
    exit 0
    ;;
--)
    shift
    break;;
*)
    showHelp
    Log::fatal "invalid argument $1"
esac
shift
done

declare containerArg="$1"
declare userArg
declare commandArg
if shift; then
    userArg="$1"
fi
if shift; then
    commandArg="$@"
fi

if [[ -z "${BATS_VERSION+xxx}" && -f "${CLI_PROFILE_HOME}" ]]; then
  source "${CLI_PROFILE_HOME}"
else
  source "${CLI_PROFILE_DEFAULT}"
fi

declare cmd=""
if [[ "$(Functions::isWindows; echo $?)" = "1" ]]; then
    # open tty for git bash
    cmd+="winpty "
fi
INTERACTIVE_MODE="-i"
if ! read -t 0; then
  # command is not piped
  INTERACTIVE_MODE+="t"
fi

cmd+="docker exec ${INTERACTIVE_MODE} "
# ensure column/lines will be updated upon terminal resize
cmd+='-e COLUMNS="$(tput cols)" -e LINES="$(tput lines)" '

cmd+="--user=${finalUserArg} "${finalContainerArg}" ${finalCommandArg}"
echo "MSYS_NO_PATHCONV=1 MSYS2_ARG_CONV_EXCL='*' ${cmd}"
eval "MSYS_NO_PATHCONV=1 MSYS2_ARG_CONV_EXCL='*' ${cmd}"
