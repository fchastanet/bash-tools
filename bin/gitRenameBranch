#!/usr/bin/env bash

# load bash-framework
CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
# shellcheck source=../bash-framework/_bootstrap.sh
source "$( cd "${CURRENT_DIR}/.." && pwd )/bash-framework/_bootstrap.sh"

#default values
SCRIPT_NAME=${0##*/}
PUSH="0"
DELETE="0"

# Usage info
showHelp() {
cat << EOF
Description: rename git local branch, use options to push new branch and delete old branch

Usage: ${SCRIPT_NAME} [-h|--help] prints this help and exits
Usage: ${SCRIPT_NAME} <newBranchName> [<oldBranchName>] [--push|-p] [--delete|-d] 
    --help,-h prints this help and exits
    --push,-p push new branch
    --delete,-d delete old remote branch
    <newBranchName> the new branch name to give to current branch
    <oldBranchName> (optional) the name of the old branch if not current one
EOF
}

# read command parameters
# $@ is all command line parameters passed to the script.
# -o is for short options like -h
# -l is for long options with double dash like --help
# the comma separates different long options
options=$(getopt -l help,push,delete -o hpd -- "$@" 2>/dev/null) || {
    Log::displayError "invalid options specified"
    showHelp
    exit 1
}

eval set -- "${options}"
while true
do
case $1 in
-h|--help)
    showHelp
    exit 0
    ;;
--push|-p)
    PUSH="1"
    ;;
--delete|-d)
    DELETE="1"
    ;;
--)
    shift
    break;;
*)
    Log::displayError "invalid argument $1"
    showHelp
    exit 1
esac
shift
done
shift $(expr $OPTIND - 1)

newName="$1"
shift || true
oldName="${1:-}"
shift || true
if [ $# -gt 0 ]; then
  Log::displayError "too much argument provided"
  showHelp
  exit 1
fi

if [ -z "${oldName}" ]; then
  oldName="$(git branch --show-current)"
fi
if [ -z "${newName}" ]; then
  Log::displayError "new branch name not provided"
  exit 1
fi
if [ -z "${oldName}" ]; then
  Log::displayError "Impossible to calculate current branch name"
  exit 1
fi
if [ "${oldName}" = "${newName}" ]; then
  Log::displayError "Branch name has not changed"
  exit 1
fi

Log::displayInfo "Renaming branch locally from ${oldName} to ${newName}"
git branch -m "${oldName}" "${newName}"
if [ "${DELETE}" = "1" ]; then
  Log::displayInfo "Removing eventual old remote branch ${oldName}"
  git push origin ":${oldName}" || true
fi
if [ "${PUSH}" = "1" ]; then
  Log::displayInfo "Pushing new branch name ${newName}"
  git push --set-upstream origin "${newName}"
fi