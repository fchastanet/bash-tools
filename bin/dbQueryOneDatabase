#!/usr/bin/env bash

#####################################
# GENERATED FILE FROM src/DbQueryAllDatabases/dbQueryOneDatabase.sh
# DO NOT EDIT IT
#####################################

# shellcheck disable=SC2034
SCRIPT_NAME=${0##*/}
# shellcheck disable=SC2034
CURRENT_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
BIN_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
ROOT_DIR="$(cd "${BIN_DIR}/.." && pwd -P)"
# shellcheck disable=SC2034
SRC_DIR="${ROOT_DIR}/src"
# shellcheck disable=SC2034
VENDOR_DIR="${ROOT_DIR}/vendor"
# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  rm -Rf "${TMPDIR}" >/dev/null 2>&1
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT

# shellcheck disable=SC2034
((failures = 0)) || true

shopt -s expand_aliases

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

export TERM=xterm-256color

#avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# FUNCTIONS

# Display message using info color (bg light blue/fg white)
# @param {String} $1 message
Log::displayInfo() {
  echo -e "${__INFO_COLOR}INFO    - ${1}${__RESET_COLOR}"
}

# Display message using success color (bg green/fg white)
# @param {String} $1 message
Log::displaySuccess() {
  echo -e "${__SUCCESS_COLOR}SUCCESS - ${1}${__RESET_COLOR}"
}

# Display message using warning color (yellow)
# @param {String} $1 message
Log::displayWarning() {
  echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}"
}

# Internal: check if dsn file has all the mandatory variables set
# Mandatory variables are: HOSTNAME, USER, PASSWORD, PORT
#
# **Arguments**:
# * $1 - dsn absolute filename
#
# Returns 0 on valid file, 1 otherwise with log output
Database::checkDsnFile() {
  local DSN_FILENAME="$1"
  if [[ ! -f "${DSN_FILENAME}" ]]; then
    Log::displayError "dsn file ${DSN_FILENAME} not found"
    return 1
  fi

  (
    unset HOSTNAME PORT PASSWORD USER
    # shellcheck source=tests/data/dsn_valid.env
    source "${DSN_FILENAME}"
    if [[ -z ${HOSTNAME+x} ]]; then
      Log::displayError "dsn file ${DSN_FILENAME} : HOSTNAME not provided"
      return 1
    fi
    if [[ -z "${HOSTNAME}" ]]; then
      Log::displayWarning "dsn file ${DSN_FILENAME} : HOSTNAME value not provided"
    fi
    if [[ "${HOSTNAME}" = "localhost" ]]; then
      Log::displayWarning "dsn file ${DSN_FILENAME} : check that HOSTNAME should not be 127.0.0.1 instead of localhost"
    fi
    if [[ -z "${PORT+x}" ]]; then
      Log::displayError "dsn file ${DSN_FILENAME} : PORT not provided"
      return 1
    fi
    if ! [[ ${PORT} =~ ^[0-9]+$ ]]; then
      Log::displayError "dsn file ${DSN_FILENAME} : PORT invalid"
      return 1
    fi
    if [[ -z "${USER+x}" ]]; then
      Log::displayError "dsn file ${DSN_FILENAME} : USER not provided"
      return 1
    fi
    if [[ -z "${PASSWORD+x}" ]]; then
      Log::displayError "dsn file ${DSN_FILENAME} : PASSWORD not provided"
      return 1
    fi
  )
}

# *Public*: run command and store data in following global variables :
# * bash_framework_status the exit status of the command
# * bash_framework_duration the duration of the command
# * bash_framework_output the output of the command
# redirecting error output to stdout is not supported, you can instead redirect stderr to a file if needed
# **Arguments**:
# * $@ command with arguments to execute
Framework::run() {
  # 'bash_framework_status', 'bash_framework_duration' are global variables
  local -i start, end
  start=$(date +%s)
  bash_framework_status=0
  bash_framework_output=""

  local origFlags="$-"
  set +eET
  local origIFS="${IFS}"

  # execute command
  # shellcheck disable=SC2034
  bash_framework_output="$("$@")"
  # shellcheck disable=SC2034
  bash_framework_status="$?"
  IFS="${origIFS}"
  set "-${origFlags}"

  # calculate duration
  end=$(date +%s)
  # shellcheck disable=SC2034
  bash_framework_duration=$((end - start))
}

# appends a command to a trap
#
# - 1st arg:  code to add
# - remaining args:  names of traps to modify
#
Framework::trapAdd() {
  local trapAddCmd="$1"
  shift || Log::fatal "${FUNCNAME[0]} usage error"
  # helper fn to get existing trap command from output
  # of trap -p
  extract_trap_cmd() { printf '%s\n' "$3"; }
  for trapAddName in "$@"; do
    trap -- "$(
      # print existing trap command with newline
      eval "extract_trap_cmd $(trap -p "${trapAddName}")"
      # print the new trap command
      printf '%s\n' "${trapAddCmd}"
    )" "${trapAddName}" ||
      Log::fatal "unable to add to trap ${trapAddName}"
  done
}

# Display message using debug color (grey)
# @param {String} $1 message
Log::displayDebug() {
  echo -e "${__DEBUG_COLOR}DEBUG   - ${1}${__RESET_COLOR}"
}

# Display message using error color (red) and exit immediately with error status 1
# @param {String} $1 message
Log::fatal() {
  Log::displayError "$1"
  exit 1
}

# TODO use alias deactivated by default
# TODO displayXXX should call _logMessage too
Log::loadEnv() {
  # Log::fatal() {
  #   __displayFatal "$@"
  #   exit 1
  # }

  # Log::logError() { :; }
  # Log::logWarning() { :; }
  # Log::logInfo() { :; }
  # Log::logSuccess() { :; }
  # Log::logDebug() { :; }

  # Log::displayError() { :; }
  # Log::displayWarning() { :; }
  # Log::displayInfo() { :; }
  # Log::displaySuccess() { :; }
  # Log::displayDebug() { :; }

  BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL:-${__LEVEL_OFF}}
  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    if [[ -z "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
    else
      if ! mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" 2>/dev/null; then
        # TODO use _logMessage to be sure to display the message during env lading
        Log::displayError "Log file directory '$(dirname "${BASH_FRAMEWORK_LOG_FILE}")' cannot be created"
        BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      elif ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null; then
        Log::displayError "Log file ${BASH_FRAMEWORK_LOG_FILE} is not writable"
        BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      fi
    fi
    # if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_ERROR)); then
    #   Log::logError() { __logMessage "ERROR  " "$@"; }
    # fi
    # if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_WARNING)); then
    #   Log::logWarning() { __logMessage "WARNING" "$@"; }
    # fi
    # if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    #   Log::logInfo() { __logMessage "INFO   " "$@"; }
    # fi
    # if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_SUCCESS)); then
    #   Log::logSuccess() { __logMessage "SUCCESS" "$@"; }
    # fi
    # if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_DEBUG)); then
    #   Log::logDebug() { __logMessage "DEBUG  " "$@"; }
    # fi
  fi

  BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL:-${__LEVEL_OFF}}
  # if ((BASH_FRAMEWORK_DISPLAY_LEVEL > __LEVEL_OFF)); then
  #   if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_ERROR)); then
  #     Log::displayError() { __displayError "$@"; }
  #   fi
  #   if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_WARNING)); then
  #     Log::displayWarning() { __displayWarning "$@"; }
  #   fi
  #   if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
  #     Log::displayInfo() { __displayInfo "$@"; }
  #   fi
  #   if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_SUCCESS)); then
  #     Log::displaySuccess() { __displaySuccess "$@"; }
  #   fi
  #   if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_DEBUG)); then
  #     Log::displayDebug() { __displayDebug "$@"; }
  #   fi
  # fi
}

# shellcheck disable=SC2034
declare -Ag allDepsResultSeen=()
declare -ag allDepsResult=()

# Public: get absolute conf file from specified conf folder deduced using these rules
#   * from absolute file (ignores <confFolder> and <extension>)
#   * relative to where script is executed (ignores <confFolder> and <extension>)
#   * from home/.bash-tools/<confFolder>
#   * from framework conf/<confFolder>
#
# **Arguments**:
# * $1 confFolder the directory name (not the path) to list
# * $2 conf file to use without extension
# * $3 the extension (sh by default)
#
# Returns absolute conf filename
Profiles::getAbsoluteConfFile() {
  local confFolder="$1"
  local conf="$2"
  local extension="${3-.sh}"

  getAbs() {
    local absoluteConfFile=""
    # load conf from absolute file, then home folder, then bash framework conf folder
    absoluteConfFile="${conf}"
    if [[ "${absoluteConfFile:0:1}" = "/" && -f "${absoluteConfFile}" ]]; then
      # file contains /, consider it as absolute filename
      echo "${absoluteConfFile}"
      return 0
    fi

    # relative to where script is executed
    absoluteConfFile="$(realpath "${__BASH_FRAMEWORK_CALLING_SCRIPT}/${conf}" 2>/dev/null || echo "")"
    if [[ -f "${absoluteConfFile}" ]]; then
      echo "${absoluteConfFile}"
      return 0
    fi

    # take extension into account
    if [[ -n "${extension}" && "${extension:0:1}" != "." ]]; then
      extension=".${extension}"
    fi

    # shellcheck source=/conf/dsn/default.local.env
    absoluteConfFile="${HOME}/.bash-tools/${confFolder}/${conf}${extension}"
    if [[ -f "${absoluteConfFile}" ]]; then
      echo "${absoluteConfFile}"
      return 0
    fi
    absoluteConfFile="${ROOT_DIR:?}/conf/${confFolder}/${conf}${extension}"
    if [[ -f "${absoluteConfFile}" ]]; then
      echo "${absoluteConfFile}"
      return 0
    fi

    return 1
  }
  local abs=""
  abs="$(getAbs)" || {
    # file not found
    Log::displayError "conf file '${conf}' not found"
    return 1
  }
  Log::displayDebug "conf file '${conf}' matching '${abs}' file"
  echo "${abs}"
  return 0
}

# Public: exits with message if current user is root
#
# **Exit**: code 1 if current user is root
Assert::expectNonRootUser() {
  if [[ "$(id -u)" = "0" ]]; then
    Log::fatal "The script must not be run as root"
  fi
}

# Public: create a new db instance
#
# **Arguments**:
# * $1 - (passed by reference) database instance to create
# * $2 - dsn profile - load the dsn.env profile
#     absolute file is deduced using rules defined in Profiles::getAbsoluteConfFile
#
# **Example:**
# ```shell
# declare -Agx dbInstance
# Database::newInstance dbInstance "default.local"
# ```
#
# Returns immediately if the instance is already initialized
Database::newInstance() {
  local -n instanceNewInstance=$1
  local dsn
  dsn="$2"

  if [[ -v instanceNewInstance['INITIALIZED'] && "${instanceNewInstance['INITIALIZED']:-0}" == "1" ]]; then
    return
  fi

  # final auth file generated from dns file
  instanceNewInstance['AUTH_FILE']=""
  instanceNewInstance['DSN_FILE']=""

  # check dsn file
  DSN_FILE="$(Profiles::getAbsoluteConfFile "dsn" "${dsn}" "env")" || exit 1
  Database::checkDsnFile "${DSN_FILE}"
  instanceNewInstance['DSN_FILE']="${DSN_FILE}"

  # shellcheck source=tests/data/dsn_valid.env
  source "${instanceNewInstance['DSN_FILE']}"

  instanceNewInstance['USER']="${USER}"
  instanceNewInstance['PASSWORD']="${PASSWORD}"
  instanceNewInstance['HOSTNAME']="${HOSTNAME}"
  instanceNewInstance['PORT']="${PORT}"

  # generate authFile for easy authentication
  instanceNewInstance['AUTH_FILE']=$(mktemp -p "${TMPDIR:-/tmp}" -t "mysql.XXXXXXXXXXXX")
  (
    echo "[client]"
    echo "user = ${USER}"
    echo "password = ${PASSWORD}"
    echo "host = ${HOSTNAME}"
    echo "port = ${PORT}"
  ) >"${instanceNewInstance['AUTH_FILE']}"
  Framework::trapAdd "rm -f \"${instanceNewInstance['AUTH_FILE']}\" 2>/dev/null || true" ERR EXIT

  # some of those values can be overridden using the dsn file
  # SKIP_COLUMN_NAMES enabled by default
  instanceNewInstance['SKIP_COLUMN_NAMES']="${SKIP_COLUMN_NAMES:-1}"
  instanceNewInstance['SSL_OPTIONS']="${MYSQL_SSL_OPTIONS:---ssl-mode=DISABLED}"
  instanceNewInstance['QUERY_OPTIONS']="${MYSQL_QUERY_OPTIONS:---batch --raw --default-character-set=utf8}"
  instanceNewInstance['DUMP_OPTIONS']="${MYSQL_DUMP_OPTIONS:---default-character-set=utf8 --compress --hex-blob --routines --triggers --single-transaction --set-gtid-purged=OFF --column-statistics=0 ${instanceNewInstance['SSL_OPTIONS']}}"
  instanceNewInstance['DB_IMPORT_OPTIONS']="${DB_IMPORT_OPTIONS:---connect-timeout=5 --batch --raw --default-character-set=utf8}"

  instanceNewInstance['INITIALIZED']=1
}

# Public: mysql query on a given db
#
# **Arguments**:
# * $1 (passed by reference) database instance to use
# * $2 sql query to execute.
#    if not provided or empty, the command can be piped (eg: cat file.sql | Database::query ...)
# * _$3 (optional)_ the db name
#
# **Returns**: mysql command status code
Database::query() {
  local -n instanceQuery=$1
  local -a mysqlCommand=()

  mysqlCommand+=(mysql)
  mysqlCommand+=("--defaults-extra-file=${instanceQuery['AUTH_FILE']}")
  IFS=' ' read -r -a queryOptions <<<"${instanceQuery['QUERY_OPTIONS']}"
  mysqlCommand+=("${queryOptions[@]}")
  if [[ "${instanceQuery['SKIP_COLUMN_NAMES']}" = "1" ]]; then
    mysqlCommand+=("-s" "--skip-column-names")
  fi
  # add optional db name
  if [[ -n "${3+x}" ]]; then
    mysqlCommand+=("$3")
  fi
  # add optional sql query
  if [[ -n "${2+x}" && -n "$2" ]]; then
    if [[ ! -f "$2" ]]; then
      mysqlCommand+=("-e")
      mysqlCommand+=("$2")
    fi
  fi
  Log::displayDebug "$(printf "execute command: '%s'" "${mysqlCommand[*]}")"

  if [[ -f "$2" ]]; then
    "${mysqlCommand[@]}" <"$2"
  else
    "${mysqlCommand[@]}"
  fi
}

# Public: set the general options to use on mysql command to query the database
# Differs than setOptions in the way that these options could change each time
#
# **Arguments**:
# * $1 - (passed by reference) database instance to use
# * $2 - options list
Database::setQueryOptions() {
  local -n instanceSetQueryOptions=$1
  # shellcheck disable=SC2034
  instanceSetQueryOptions['QUERY_OPTIONS']="$2"
}

# Public: by default we skip the column names
# but sometimes we need column names to display some results
# disable this option temporarily and then restore it to true
#
# **Arguments**:
# * $1 - (passed by reference) database instance to use
# * $2 - 0 to disable, 1 to enable (hide column names)
Database::skipColumnNames() {
  local -n instanceSkipColumnNames=$1
  # shellcheck disable=SC2034
  instanceSkipColumnNames['SKIP_COLUMN_NAMES']="$2"
}

# global variables used by Framework::run
declare -gx bash_framework_status
declare -gix bash_framework_duration
declare -gx bash_framework_output

## Initialize some default variables
## List of variables
## * BASH_FRAMEWORK_INITIALIZED=1 lazy initialization
##
## default tests/data/.env file is loaded
##
## then all these variables can be overridden by a .env file that will be searched in the following directories
## in this order (stop on first file found):
## * __BASH_FRAMEWORK_CALLING_SCRIPT: upper directory
## * ~/ : home path
## * ~/.bash-tools : home path .bash-tools
## alternatively you can force a given .env file to be loaded using
## BASH_FRAMEWORK_ENV_FILEPATH=<fullPathToEnvFile or empty if no file to be loaded>
Framework::loadEnv() {
  # import default .env file
  #!/usr/bin/env bash

  # Default settings
  # you can override these settings by creating ${HOME}/.bash-tools/.env file
  ###
  ### LOG Level
  ### minimum level of the messages that will be logged into LOG_FILE
  ###
  ### 0: NO LOG
  ### 1: ERROR
  ### 2: WARNING
  ### 3: INFO
  ### 4: DEBUG
  ###
  BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL-0}

  ###
  ### DISPLAY Level
  ### minimum level of the messages that will be displayed on screen
  ###
  ### 0: NO LOG
  ### 1: ERROR
  ### 2: WARNING
  ### 3: INFO
  ### 4: DEBUG
  ###
  BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL-3}

  ###
  ### Log to file
  ###
  ### all log messages will be redirected to log file specified
  ### this same path will be used inside and outside of the container
  ###
  BASH_FRAMEWORK_LOG_FILE=${BASH_FRAMEWORK_LOG_FILE-${HOME}/.bash-tools/logs/bash.log}

  # absolute directory containing db import sql dumps
  DB_IMPORT_DUMP_DIR=${DB_IMPORT_DUMP_DIR-${HOME}/.bash-tools/dbImportDumps}

  # garbage collect all files for which modification is greater than eg: 30 days (+30)
  # each time an existing file is used by dbImport/dbImportTable
  # the file modification time is set to now
  DB_IMPORT_GARBAGE_COLLECT_DAYS=${DB_IMPORT_GARBAGE_COLLECT_DAYS-+30}

  # absolute directory containing dbScripts used by dbScriptAllDatabases
  SCRIPTS_FOLDER=${SCRIPTS_FOLDER-${HOME}/.bash-tools/conf/dbScripts}

  # absolute directory to bash-tools project
  BASH_TOOLS_FOLDER=${BASH_TOOLS_FOLDER-$(cd .. && pwd)}

  # -----------------------------------------------------
  # AWS Parameters
  # -----------------------------------------------------
  S3_BASE_URL=${S3_BASE_URL-}
  TEMP_FOLDER=${TEMP_FOLDER-/tmp}

  # import custom .env file
  if [[ -z "${BASH_FRAMEWORK_ENV_FILEPATH+xxx}" ]]; then
    # BASH_FRAMEWORK_ENV_FILEPATH not defined
    if [[ -f "${HOME}/.bash-tools/.env" ]]; then
      # shellcheck source=tests/data/.env
      source "${HOME}/.bash-tools/.env" || exit 1
    elif [[ -f "${HOME}/.env" ]]; then
      # shellcheck source=tests/data/.env
      source "${HOME}/.env" || exit 1
    fi
  elif [[ -z "${BASH_FRAMEWORK_ENV_FILEPATH}" ]]; then
    # BASH_FRAMEWORK_ENV_FILEPATH defined but empty - nothing to do
    true
  else
    # load BASH_FRAMEWORK_ENV_FILEPATH
    [[ ! -f "${BASH_FRAMEWORK_ENV_FILEPATH}" ]] &&
      Log::fatal "env file not not found - ${BASH_FRAMEWORK_ENV_FILEPATH}"
    # shellcheck source=tests/data/.env
    source "${BASH_FRAMEWORK_ENV_FILEPATH}"
  fi

  Log::loadEnv

  export BASH_FRAMEWORK_INITIALIZED=1

  set +o allexport
}

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export readonly __ERROR_COLOR='\e[31m'      # Red
  export readonly __INFO_COLOR='\e[44m'       # white on lightBlue
  export readonly __SUCCESS_COLOR='\e[32m'    # Green
  export readonly __WARNING_COLOR='\e[33m'    # Yellow
  export readonly __SKIPPED_COLOR='\e[93m'    # Light Yellow
  export readonly __TEST_COLOR='\e[100m'      # Light magenta
  export readonly __TEST_ERROR_COLOR='\e[41m' # white on red
  export readonly __SKIPPED_COLOR='\e[33m'    # Yellow
  export readonly __DEBUG_COLOR='\e[37m'      # Grey
  # Internal: reset color
  export readonly __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  export readonly __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  export readonly __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  export readonly __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export readonly __ERROR_COLOR=''
  export readonly __INFO_COLOR=''
  export readonly __SUCCESS_COLOR=''
  export readonly __WARNING_COLOR=''
  export readonly __SKIPPED_COLOR=''
  export readonly __TEST_COLOR=''
  export readonly __TEST_ERROR_COLOR=''
  export readonly __SKIPPED_COLOR=''
  export readonly __DEBUG_COLOR=''
  # Internal: reset color
  export readonly __RESET_COLOR=''
  export readonly __HELP_EXAMPLE=''
  export readonly __HELP_TITLE=''
  export readonly __HELP_NORMAL=''
fi

# Display message using error color (red)
# @param {String} $1 message
Log::displayError() {
  echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}"
}

############################################################
# INTERNAL USE ONLY
# USED BY bin/dbQueryAllDatabases
############################################################

Assert::expectNonRootUser

Framework::loadEnv

# ensure that Ctrl-C is trapped by this script and not sub mysql process
trap 'exit 130' INT

# query is passed via export
declare DSN_FILE="$1"
declare DB="$2"

declare -Agx dbInstance
Database::newInstance dbInstance "${DSN_FILE}"
Database::setQueryOptions dbInstance "${dbInstance[QUERY_OPTIONS]} --connect-timeout=5"

# identify columns header
echo -n "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
Database::skipColumnNames dbInstance 0

# shellcheck disable=SC2154
Database::query dbInstance "${query}" "${DB}" ||
  Log::displayError "database ${DB} error" 1>&2
