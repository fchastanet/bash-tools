#!/bin/bash

# load bash-framework
# shellcheck source=bash-framework/_bootstrap.sh
source "$( cd "$( readlink -e "${BASH_SOURCE[0]%/*}/.." )" && pwd )/bash-framework/_bootstrap.sh"

Framework::expectNonRootUser

CURRENT_DIR=$( cd "$( readlink -e "${BASH_SOURCE[0]%/*}" )" && pwd )

import bash-framework/Database
import bash-framework/Array

#initialize Database lib in order to use to docker

# ensure that Ctrl-C is trapped by this script and not sub mysql process
trap 'exit 130' INT

#default values
SCRIPT_NAME=${0##*/}
JOBS_NUMBER=1
QUERY=0
REMOTE=0
MYSQL_OPTIONS=""
declare -a PARALLEL_OPTIONS

# Usage info
showHelp() {
cat << EOF
Usage: ${SCRIPT_NAME} [-h|--help]
Usage: ${SCRIPT_NAME} <query|queryFile> [--env-file|-e <envfile>] [-t|--as-tsv] [-q|--query] [--jobs|-j <numberOfJobs>] [--bar|-b]
    --help,-h prints this help and exits
    --as-tsv,-t show results as tsv file (separated by tabulations)
    --query,-q implies <query> parameter is a mysql query string
    -r|--remote checks remote db, local db otherwise
    --jobs,-j <numberOfJobs> specify the number of db to query in parallel (this needs the use of gnu parallel)
    --bar,-b Show progress as a progress bar. In the bar is shown: % of jobs completed, estimated seconds left, and number of jobs started.
    <query|queryFile>
        if -q option is provided this parameter is a mysql query string
        else a file must be specified
    --env-file,-e <envfile> load <envfile>, this file must contains these variables in order to connect to the mysql server
MYSQL_HOSTNAME=""
MYSQL_USER=""
MYSQL_PASSWORD=""
MYSQL_PORT=""
REMOTE_MYSQL_HOSTNAME=""
REMOTE_MYSQL_PORT=""
REMOTE_MYSQL_USER=""
REMOTE_MYSQL_PASSWORD=""

    local DB connection  : ${MYSQL_USER}:${MYSQL_PASSWORD}@${MYSQL_HOSTNAME}:${MYSQL_PORT}
    remote DB connection : ${REMOTE_MYSQL_USER}:${REMOTE_MYSQL_PASSWORD}@${REMOTE_MYSQL_HOSTNAME}:${REMOTE_MYSQL_PORT}
EOF
}

# read command parameters
# $@ is all command line parameters passed to the script.
# -o is for short options like -h
# -l is for long options with double dash like --help
# the comma separates different long options
options=$(getopt -l help,as-tsv,query,remote,bar,jobs:,with-headers,env-file: -o htqrbj:we: -- "$@" 2> /dev/null) || {
    Log::displayError "invalid options specified"
    showHelp
    exit 1
}

eval set -- "${options}"
while true
do
case $1 in
-h|--help)
    showHelp
    exit 0
    ;;
--as-tsv|-t)
    MYSQL_OPTIONS="--batch --raw"
    ;;
--jobs|-j)
    shift
    JOBS_NUMBER=$1
    ;;
--bar|-b)
    PARALLEL_OPTIONS+=("--bar")
    ;;
--query|-q)
    QUERY=1
    ;;
--remote|-r)
    REMOTE=1
    ;;
--env-file|-e)
    shift
    ENV_FILE=$1
    ;;
--)
    shift
    break;;
*)
    Log::displayError "invalid argument $1"
    showHelp
    exit 1
esac
shift
done

# additional arguments
shift $(( OPTIND - 1 ))

queryFile=$1
if [[ -z "${queryFile}" ]]; then
    if [[ "${QUERY}" = "0" ]]; then
        Log::displayError "You must provide the sql file to be executed"
    else
        Log::displayError "You must provide the sql string to be executed"
    fi
    exit 1
fi

declare query=""
if [[ "${QUERY}" = "0" ]]; then
    if [[ ! -f "${queryFile}" ]]; then
        Log::displayError "the file ${queryFile} does not exist"
        exit 1
    fi
    query=$(cat "${queryFile}")
else
    query="${queryFile}"
fi

if [[ "${REMOTE}" = "1" ]] ; then
    HOSTNAME="${REMOTE_MYSQL_HOSTNAME}"
    USER="${REMOTE_MYSQL_USER}"
    PASSWORD="${REMOTE_MYSQL_PASSWORD}"
    PORT="${REMOTE_MYSQL_PORT}"
else
    HOSTNAME="${MYSQL_HOSTNAME}"
    USER="${MYSQL_USER}"
    PASSWORD="${MYSQL_PASSWORD}"
    PORT="${MYSQL_PORT}"
fi

if ! [[ ${JOBS_NUMBER} =~ ^[0-9]+$ ]] ; then
   Log::displayError "number of jobs is incorrect"
   exit 1
fi
if [[ ${JOBS_NUMBER} -lt 1 ]] ; then
    Log::displayError "number of jobs must be greater than 0"
    exit 1
fi
if [[ ${JOBS_NUMBER} -gt 1 ]] ; then
    Functions::checkCommandExists parallel "sudo apt-get install parallel"
fi

if [[ -n "${ENV_FILE}" ]]; then
  if [[ ! -f "${ENV_FILE}" ]]; then
      Log::displayError "env file ${ENV_FILE} does not exist"
      exit 1
  fi

  # load env file
  source "${ENV_FILE}"

  # check that expected env variables are set
  expectedEnvVars=(HOSTNAME USER PASSWORD PORT)
  allEnvVarSet=1
  for var in "${expectedEnvVars[@]}"
  do
      [[ -v "${var}" ]] || {
          Log::displayError "env file ${ENV_FILE} should define variable ${var}"
          allEnvVarSet=0
      }
  done
  [[ "${allEnvVarSet}" = "0" ]] && exit 1
fi

# mysql command is needed
Functions::checkCommandExists mysql "sudo apt-get install mysql-client"

declare -Agx dbInstance
Database::newInstance dbInstance "${HOSTNAME}" "${PORT}" "${USER}" "${PASSWORD}"
Database::setOptions dbInstance "${MYSQL_OPTIONS}"
Database::setMysqlCommands dbInstance \
    "${MYSQL_COMMAND:-${dbInstance['MYSQL_COMMAND']}}" \
    "${MYSQLDUMP_COMMAND:-${dbInstance['MYSQLDUMP_COMMAND']}}" \
    "${MYSQLSHOW_COMMAND:-${dbInstance['MYSQLSHOW_COMMAND']}}" \

# list of all databases
if [[ "${JOBS_NUMBER}" = "1" ]] ; then
    (
        allDbs="$(Database::query dbInstance "show databases" | tail -n +2)"
        headerLineDisplayed=0
        declare db
        echo "${allDbs}" | while IFS=" " read db; do
            if ! Array::contains "${db}" "performance_schema" "information_schema" "mysql" ; then
                # errors will be shown on stderr, result on stdout
                if [[ "${headerLineDisplayed}" = "0" ]]; then
                    Database::query dbInstance "${query}" "${db}" || (
                      Log::displayError "database ${db} error" >&2
                    )
                    headerLineDisplayed=1
                else
                    # remove first header line
                    (Database::query dbInstance "${query}" "${db}" | tail -n +1) || (
                      Log::displayError "database ${db} error" >&2
                    )
                fi
            fi
        done
    )
else
    PARALLEL_OPTIONS+=("--linebuffer" "-j" "${JOBS_NUMBER}")

    export query
    export MYSQL_OPTIONS
    Database::query dbInstance "show databases" "mysql" |
        parallel "${PARALLEL_OPTIONS[@]}" "${CURRENT_DIR}/_dbQueryOneDatabase.sh" \
            "${HOSTNAME}" "${PORT}" "${USER}" "${PASSWORD}" \
            | sed -E '1!{/^@@@/d}' \
            | sed 's/^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//'
fi
