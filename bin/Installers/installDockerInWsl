#!/usr/bin/env bash

#####################################
# GENERATED FILE FROM https://github.com/fchastanet/bash-tools/tree/master/src/Installers/installDockerInWsl.sh
# DO NOT EDIT IT
#####################################

# shellcheck disable=SC2034
SCRIPT_NAME=${0##*/}
# shellcheck disable=SC2034
CURRENT_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
BIN_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
ROOT_DIR="$(cd "${BIN_DIR}/../.." && pwd -P)"
# shellcheck disable=SC2034
SRC_DIR="${ROOT_DIR}/src"
# shellcheck disable=SC2034
VENDOR_DIR="${ROOT_DIR}/vendor"
# shellcheck disable=SC2034
VENDOR_BIN_DIR="${ROOT_DIR}/vendor/bin"
export PATH="${BIN_DIR}":"${VENDOR_BIN_DIR}":${PATH}

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  rm -Rf "${TMPDIR}" >/dev/null 2>&1
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
  exit 130
}
trap interruptManagement INT

# shellcheck disable=SC2034
((failures = 0)) || true

shopt -s expand_aliases

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

export TERM=xterm-256color

#avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# FUNCTIONS

Args::showHelp() {
  local helpArg="$1"
  echo -e "${helpArg}"
}

# Display message using error color (red)
# @param {String} $1 message
Log::displayError() {
  echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}" >&2
}

# Display message using warning color (yellow)
# @param {String} $1 message
Log::displayWarning() {
  echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}" >&2
}

# extract version number from github api
# @stdin json result of github API
Version::githubApiExtractVersion() {
  jq -r ".tag_name" | Version::parse
}

Args::defaultHelpNoExit() {
  local helpArg="$1"
  shift || true
  # shellcheck disable=SC2034
  local args
  args="$(getopt -l help -o h -- "$@" 2>/dev/null)" || true
  eval set -- "${args}"

  while true; do
    case $1 in
      -h | --help)
        Args::showHelp "${helpArg}"
        return 1
        ;;
      --)
        break
        ;;
      *)
        # ignore
        ;;
    esac
  done
}

# *Public*: run command and store data in following global variables :
# * bash_framework_status the exit status of the command
# * bash_framework_duration the duration of the command
# * bash_framework_output the output of the command
# redirecting error output to stdout is not supported, you can instead redirect stderr to a file if needed
# **Arguments**:
# * $@ command with arguments to execute
Framework::run() {
  # 'bash_framework_status', 'bash_framework_duration' are global variables
  local -i start end
  start=$(date +%s)
  bash_framework_status=0
  bash_framework_output=""

  local origFlags="$-"
  set +eET
  local origIFS="${IFS}"

  # execute command
  # shellcheck disable=SC2034
  bash_framework_output="$("$@")"
  # shellcheck disable=SC2034
  bash_framework_status="$?"
  IFS="${origIFS}"
  set "-${origFlags}"

  # calculate duration
  end=$(date +%s)
  # shellcheck disable=SC2034
  bash_framework_duration=$((end - start))
}

Github::defaultInstall() {
  local newSoftware="$1"
  local targetFile="$2"
  local version="$3"
  local installCallback=$4
  # shellcheck disable=SC2086
  mkdir -p "$(dirname "${targetFile}")"
  if [[ "$(type -t "${installCallback}")" = "function" ]]; then
    ${installCallback} "${newSoftware}" "${targetFile}" "${version}"
  else
    mv "${newSoftware}" "${targetFile}"
  fi
  chmod +x "${targetFile}"
  hash -r
  rm -f "${newSoftware}" || true
}

# github repository eg: kubernetes-sigs/kind
# @param {String} githubUrl eg: https://github.com/kubernetes-sigs/kind/releases/download/@latestVersion@/kind-linux-amd64
Github::extractRepoFromGithubUrl() {
  local githubUrl="$1"
  echo "${githubUrl}" | sed -E 's#^https://github.com/([^/]+)/([^/]+)/.*$#\1/\2#'
}

# Retrieve the latest version number of a github release using Github API using retry
# @param {String} $1 repository in the format fchastanet/bash-tools
#   that would match https://github.com/fchastanet/bash-tools
# @param {String} $2 reference to a variable that will contain the result of the command
# @output log messages about retry
Github::getLatestRelease() {
  local repo="$1"
  # we need to pass the result through a reference instead of output directly
  # because retry can output too
  local -n resultRef=$2
  resultRef=""
  local resultFile
  resultFile="$(mktemp -p "${TMPDIR:-/tmp}" -t githubLatestRelease.XXXX)"
  # Get latest release from GitHub api
  if Retry::default curl \
    -o "${resultFile}" \
    --fail \
    --silent \
    "https://api.github.com/repos/${repo}/releases/latest"; then
    # shellcheck disable=SC2034
    resultRef="$(Version::githubApiExtractVersion <"${resultFile}")"
  fi
  rm -f "${resultFile}"
}

# Retry a command several times depending on parameters
# @param {int}    $1 max retries
# @param {int}    $2 delay between attempt
# @param {String} $3 message to display to describe the attempt
# @param ...      $@ rest of parameters, the command to run
# @return 0 on success, 1 if max retries count reached
Retry::parameterized() {
  local maxRetries=$1
  shift || true
  local delayBetweenTries=$1
  shift || true
  local message="$1"
  shift || true
  local retriesCount=1
  while true; do
    Log::displayInfo "Attempt ${retriesCount}/${maxRetries}: ${message}"
    if "$@"; then
      break
    elif [[ ${retriesCount} -le ${maxRetries} ]]; then
      Log::displayWarning "Command failed. Wait for ${delayBetweenTries} seconds"
      ((retriesCount++))
      sleep "${delayBetweenTries}"
    else
      Log::displayError "The command has failed after ${retriesCount} attempts."
      return 1
    fi
  done
  return 0
}

# extract software version number
# @param $1 the command that will be called with --version parameter
Version::getCommandVersionFromPlainText() {
  local command="$1"
  local argVersion="${2:---version}"
  "${command}" "${argVersion}" 2>&1 |
    Version::parse # keep only version numbers
}

# filter to keep only version number from a string
# @stdin the string to parse
Version::parse() {
  sed -nre 's/[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p' | head -n1
}

Args::defaultHelp() {
  if ! Args::defaultHelpNoExit "$@"; then
    exit 0
  fi
}

# Public: exits with message if current user is root
#
# **Exit**: code 1 if current user is root
Assert::expectNonRootUser() {
  if [[ "$(id -u)" = "0" ]]; then
    Log::fatal "The script must not be run as root"
  fi
}

# global variables used by Framework::run
declare -gx bash_framework_status
declare -gix bash_framework_duration
declare -gx bash_framework_output

# Public: create a temp file using default TMPDIR variable
# initialized in src/_includes/_header.tpl
#
# **Arguments**:
# @param $1 {String} template (optional)
Framework::createTempFile() {
  mktemp -p "${TMPDIR:-/tmp}" -t "$1.XXXXXXXXXXXX"
}

# upgrade given binary to latest github release using retry
# @param {String}   targetFile target binary file (eg: /usr/local/bin/kind)
# @param {String}   releaseUrl github release url (eg: https://github.com/kubernetes-sigs/kind/releases/download/@latestVersion@/kind-linux-amd64)
#    the placeholder @latestVersion@ will be replaced by the latest release version
# @param {Function} versionCallback function called to get software version (default: Version::getCommandVersionFromPlainText will call software with argument --version)
# @param {Function} installCallback function called to install the file retrieved on github (default copy as is and set execution bit)
# @output log messages about retry, install, upgrade
Github::upgradeRelease() {
  local targetFile="$1"
  local releaseUrl="$2"
  local argVersion="${3:---version}"
  local versionCallback="${4:-Version::getCommandVersionFromPlainText}"
  # shellcheck disable=SC2034
  local installCallback="${5:-}"
  local latestVersion
  local repo

  repo="$(Github::extractRepoFromGithubUrl "${releaseUrl}")"
  Github::getLatestRelease "${repo}" latestVersion
  Log::displayInfo "Repo ${repo} latest version found is ${latestVersion}"

  local currentVersion="not existing"
  if [[ -f "${targetFile}" ]]; then
    currentVersion="$(${versionCallback} "${targetFile}" "${argVersion}" 2>&1 || true)"
  fi
  if [[ "${currentVersion}" = "${latestVersion}" ]]; then
    Log::displayInfo "${targetFile} version ${latestVersion} already installed"
  else
    if [[ -z "${currentVersion}" ]]; then
      Log::displayInfo "Installing ${targetFile} with version ${latestVersion}"
    else
      Log::displayInfo "Upgrading ${targetFile} from version ${currentVersion} to ${latestVersion}"
    fi
    local url
    url="$(echo "${releaseUrl}" | sed -E "s/@latestVersion@/${latestVersion}/g")"
    Log::displayInfo "Using url ${url}"
    newSoftware=$(mktemp -p "${TMPDIR:-/tmp}" -t github.newSoftware.XXXX)
    Retry::default curl \
      -L \
      -o "${newSoftware}" \
      --fail \
      "${url}"

    Github::defaultInstall "${newSoftware}" "${targetFile}" "${latestVersion}" "${installCallback}"
  fi
}

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  readonly __ERROR_COLOR='\e[31m'      # Red
  readonly __INFO_COLOR='\e[44m'       # white on lightBlue
  readonly __SUCCESS_COLOR='\e[32m'    # Green
  readonly __WARNING_COLOR='\e[33m'    # Yellow
  readonly __TEST_COLOR='\e[100m'      # Light magenta
  readonly __TEST_ERROR_COLOR='\e[41m' # white on red
  readonly __SKIPPED_COLOR='\e[33m'    # Yellow
  readonly __DEBUG_COLOR='\e[37m'      # Grey
  # Internal: reset color
  readonly __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  readonly __ERROR_COLOR=''
  readonly __INFO_COLOR=''
  readonly __SUCCESS_COLOR=''
  readonly __WARNING_COLOR=''
  readonly __SKIPPED_COLOR=''
  readonly __TEST_COLOR=''
  readonly __TEST_ERROR_COLOR=''
  readonly __DEBUG_COLOR=''
  # Internal: reset color
  readonly __RESET_COLOR=''
  readonly __HELP_EXAMPLE=''
  readonly __HELP_TITLE=''
  readonly __HELP_NORMAL=''
fi
export __ERROR_COLOR
export __INFO_COLOR
export __SUCCESS_COLOR
export __WARNING_COLOR
export __SKIPPED_COLOR
export __TEST_COLOR
export __TEST_ERROR_COLOR
export __SKIPPED_COLOR
export __DEBUG_COLOR
export __RESET_COLOR
export __HELP_EXAMPLE
export __HELP_TITLE
export __HELP_NORMAL

# Display message using info color (bg light blue/fg white)
# @param {String} $1 message
Log::displayInfo() {
  echo -e "${__INFO_COLOR}INFO    - ${1}${__RESET_COLOR}" >&2
}

# Display message using success color (bg green/fg white)
# @param {String} $1 message
Log::displaySuccess() {
  echo -e "${__SUCCESS_COLOR}SUCCESS - ${1}${__RESET_COLOR}" >&2
}

# Display message using error color (red) and exit immediately with error status 1
# @param {String} $1 message
Log::fatal() {
  echo -e "${__ERROR_COLOR}FATAL   - ${1}${__RESET_COLOR}" >&2
  exit 1
}

# Retry a command 5 times with a delay of 15 seconds between each attempt
# @param          $@ the command to run
# @return 0 on success, 1 if max retries count reached
Retry::default() {
  Retry::parameterized 5 15 "" "$@"
}

# draw a line with the character passed in parameter repeated depending on terminal width
# @param {String} $1 character to use as separator (default value #)
UI::drawLine() {
  local character="${1:-#}"
  printf '%*s\n' "${COLUMNS:-$([[ -t 0 ]] && tput cols || echo)}" '' | tr ' ' "${character}"
}

# default callback called to get a version of a software
Version::getCommandVersionFromJson() {
  local command="$1"
  local argVersion="${2:---version}"
  "${command}" "${argVersion}" 2>&1 |
    jq -r ".tag_name" | # Get tag line
    Version::parse      # keep only version numbers
}

HELP="$(
  cat <<EOF
${__HELP_TITLE}Description:${__HELP_NORMAL} install and configure docker and docker compose inside WSL2

${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME}
EOF
)"
Args::defaultHelp "${HELP}" "$@"

Assert::expectNonRootUser

Log::displayInfo "install docker required packages"
Retry::default sudo apt-get update -y --fix-missing -o Acquire::ForceIPv4=true
Retry::default sudo apt-get install -y \
  apt-transport-https \
  ca-certificates \
  curl \
  gnupg2

Log::displayInfo "install docker apt source list"
# shellcheck source=/tests/data/etc_os-release
source /etc/os-release

Retry::default curl -fsSL "https://download.docker.com/linux/${ID}/gpg" | sudo apt-key add -

echo "deb [arch=amd64] https://download.docker.com/linux/${ID} ${VERSION_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/docker.list

Retry::default sudo apt-get update -y --fix-missing -o Acquire::ForceIPv4=true

Log::displayInfo "install docker"
Retry::default sudo apt-get install -y \
  containerd.io \
  docker-ce \
  docker-ce-cli

USERNAME="$(id -un)"
Log::displayInfo "allowing user '${USERNAME}' to use docker"
sudo getent group docker >/dev/null || sudo groupadd docker || true
sudo usermod -aG docker "${USERNAME}" || true

Log::displayInfo "Configure dockerd"
# see https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9
# see https://dev.solita.fi/2021/12/21/docker-on-wsl2-without-docker-desktop.html
DOCKER_DIR="/var/run/docker-data"
DOCKER_SOCK="${DOCKER_DIR}/docker.sock"
DOCKER_HOST="unix://${DOCKER_SOCK}"
export DOCKER_HOST
# shellcheck disable=SC2207
WSL_DISTRO_NAME="$(
  IFS='/'
  x=($(wslpath -m /))
  echo "${x[${#x[@]} - 1]}"
)"

if [[ -z "${WSL_DISTRO_NAME}" ]]; then
  Log::fatal "impossible to deduce distribution name"
fi

if [[ ! -d "${DOCKER_DIR}" ]]; then
  sudo mkdir -pm o=,ug=rwx "${DOCKER_DIR}" || exit 1
fi
sudo chgrp docker "${DOCKER_DIR}"
if [[ ! -d "/etc/docker" ]]; then
  sudo mkdir -p /etc/docker || exit 1
fi

# shellcheck disable=SC2174
if [[ ! -f "/etc/docker/daemon.json" ]]; then
  Log::displayInfo "Creating /etc/docker/daemon.json"
  LOCAL_DNS1="$(grep nameserver </etc/resolv.conf | cut -d ' ' -f 2)"
  LOCAL_DNS2="$(ip --json --family inet addr show eth0 | jq -re '.[].addr_info[].local')"
  (
    echo "{"
    echo "  \"hosts\": [\"${DOCKER_HOST}\"],"
    echo "  \"dns\": [\"${LOCAL_DNS1}\", \"${LOCAL_DNS2}\", \"8.8.8.8\", \"8.8.4.4\"]"
    echo "}"
  ) | sudo tee /etc/docker/daemon.json
fi

dockerIsStarted() {
  DOCKER_PS="$(docker ps 2>&1 || true)"
  [[ -S "${DOCKER_SOCK}" && ! "${DOCKER_PS}" =~ "Cannot connect to the Docker daemon" ]]
}
Log::displayInfo "Checking if docker is started ..."
if dockerIsStarted; then
  Log::displaySuccess "Docker connection success"
else
  Log::displayInfo "Starting docker ..."
  sudo rm -f "${DOCKER_SOCK}" || true
  wsl.exe -d "${WSL_DISTRO_NAME}" sh -c "nohup sudo -b dockerd < /dev/null > '${DOCKER_DIR}/dockerd.log' 2>&1"
  if ! dockerIsStarted; then
    Log::fatal "Unable to start docker"
  fi
fi

Log::displayInfo "Installing docker-compose v1"
tempDownload="$(Framework::createTempFile docker-compose)"
[[ -f /usr/local/bin/docker-compose ]] && cp /usr/local/bin/docker-compose "${tempDownload}"
Github::upgradeRelease \
  "docker/compose" \
  "${tempDownload}" \
  "https://github.com/docker/compose/releases/download/v@latestVersion@/docker-compose-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)" \
  Version::getCommandVersionFromJson

sudo mv "${tempDownload}" /usr/local/bin/docker-compose
sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

Log::displayInfo "Installing docker-compose v2"
# create the docker plugins directory if it doesn't exist yet
mkdir -p "${HOME}/.docker/cli-plugins"
sudo ln -sf /usr/local/bin/docker-compose "${HOME}/.docker/cli-plugins/docker-compose"

echo
UI::drawLine "-"
Log::displayInfo "docker executable path $(command -v docker)"
Log::displayInfo "docker version $(docker --version)"
Log::displayInfo "docker-compose version $(docker-compose --version)"

echo
if [[ "${SHELL}" = "/usr/bin/bash" ]]; then
  Log::displayInfo "Please add these lines at the end of your ~/.bashrc"
elif [[ "${SHELL}" = "/usr/bin/zsh" ]]; then
  Log::displayInfo "Please add these lines at the end of your ~/.zshrc"
else
  Log::displayInfo "Please add these lines at the end of your shell entrypoint (${SHELL})"
fi
echo
echo "export DOCKER_HOST='${DOCKER_HOST}'"
echo "if [[ ! -S '${DOCKER_SOCK}' ]]; then"
echo "   sudo mkdir -pm o=,ug=rwx '${DOCKER_DIR}'"
echo "   sudo chgrp docker '${DOCKER_DIR}'"
echo "   /mnt/c/Windows/system32/wsl.exe -d '${WSL_DISTRO_NAME}' sh -c 'nohup sudo -b dockerd < /dev/null > \"${DOCKER_DIR}/dockerd.log\" 2>&1'"
echo "fi"
