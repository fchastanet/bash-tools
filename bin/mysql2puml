#!/usr/bin/env bash

# shellcheck disable=SC2034

#####################################
# GENERATED FILE FROM https://github.com/fchastanet/bash-tools/tree/master/src/Converters/mysql2puml.sh
# DO NOT EDIT IT
#####################################

# shellcheck disable=SC2034
SCRIPT_NAME=${0##*/}
# shellcheck disable=SC2034
CURRENT_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
BIN_DIR=$(cd "$(readlink -e "${BASH_SOURCE[0]%/*}")" && pwd -P)
ROOT_DIR="$(cd "${BIN_DIR}/.." && pwd -P)"
# shellcheck disable=SC2034
SRC_DIR="${ROOT_DIR}/src"
# shellcheck disable=SC2034
VENDOR_DIR="${ROOT_DIR}/vendor"
# shellcheck disable=SC2034
VENDOR_BIN_DIR="${ROOT_DIR}/vendor/bin"
export PATH="${BIN_DIR}":"${VENDOR_BIN_DIR}":${PATH}

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  rm -Rf "${TMPDIR}" >/dev/null 2>&1
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT

# shellcheck disable=SC2034
((failures = 0)) || true

shopt -s expand_aliases

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

export TERM=xterm-256color

#avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  readonly __ERROR_COLOR='\e[31m'      # Red
  readonly __INFO_COLOR='\e[44m'       # white on lightBlue
  readonly __SUCCESS_COLOR='\e[32m'    # Green
  readonly __WARNING_COLOR='\e[33m'    # Yellow
  readonly __TEST_COLOR='\e[100m'      # Light magenta
  readonly __TEST_ERROR_COLOR='\e[41m' # white on red
  readonly __SKIPPED_COLOR='\e[33m'    # Yellow
  readonly __HELP_COLOR='\e[7;49;33m'  # Black on Gold
  readonly __DEBUG_COLOR='\e[37m'      # Grey
  # Internal: reset color
  readonly __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  readonly __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  readonly __ERROR_COLOR=''
  readonly __INFO_COLOR=''
  readonly __SUCCESS_COLOR=''
  readonly __WARNING_COLOR=''
  readonly __SKIPPED_COLOR=''
  readonly __HELP_COLOR=''
  readonly __TEST_COLOR=''
  readonly __TEST_ERROR_COLOR=''
  readonly __DEBUG_COLOR=''
  # Internal: reset color
  readonly __RESET_COLOR=''
  readonly __HELP_EXAMPLE=''
  readonly __HELP_TITLE=''
  readonly __HELP_NORMAL=''
fi
export __ERROR_COLOR
export __INFO_COLOR
export __SUCCESS_COLOR
export __WARNING_COLOR
export __SKIPPED_COLOR
export __TEST_COLOR
export __TEST_ERROR_COLOR
export __SKIPPED_COLOR
export __HELP_COLOR
export __DEBUG_COLOR
export __RESET_COLOR
export __HELP_EXAMPLE
export __HELP_TITLE
export __HELP_NORMAL

# Public: log level off
export __LEVEL_OFF=0
# Public: log level error
export __LEVEL_ERROR=1
# Public: log level warning
export __LEVEL_WARNING=2
# Public: log level info
export __LEVEL_INFO=3
# Public: log level success
export __LEVEL_SUCCESS=3
# Public: log level debug
export __LEVEL_DEBUG=4

export __LEVEL_OFF
export __LEVEL_ERROR
export __LEVEL_WARNING
export __LEVEL_INFO
export __LEVEL_SUCCESS
export __LEVEL_DEBUG

# Display message using error color (red) and exit immediately with error status 1
# @param {String} $1 message
Log::fatal() {
  echo -e "${__ERROR_COLOR}FATAL   - ${1}${__RESET_COLOR}" >&2
  Log::logFatal "$1"
  exit 1
}

# shellcheck disable=SC2034
declare -Ag allDepsResultSeen=()
declare -ag allDepsResult=()

# Public: get absolute conf file from specified conf folder deduced using these rules
#   * from absolute file (ignores <confFolder> and <extension>)
#   * relative to where script is executed (ignores <confFolder> and <extension>)
#   * from home/.bash-tools/<confFolder>
#   * from framework conf/<confFolder>
#
# **Arguments**:
# * $1 confFolder the directory name (not the path) to list
# * $2 conf file to use without extension
# * $3 the extension (sh by default)
#
# Returns absolute conf filename
Profiles::getAbsoluteConfFile() {
  local confFolder="$1"
  local conf="$2"
  local extension="${3-.sh}"
  if [[ -n "${extension}" && "${extension:0:1}" != "." ]]; then
    extension=".${extension}"
  fi

  testAbs() {
    local result
    result="$(realpath -e "$1" 2>/dev/null)"
    # shellcheck disable=SC2181
    if [[ "$?" = "0" && -f "${result}" ]]; then
      echo "${result}"
      return 0
    fi
    return 1
  }

  # conf is absolute file (including extension)
  testAbs "${confFolder}${extension}" && return 0
  # conf is absolute file
  testAbs "${confFolder}" && return 0
  # conf is absolute file (including extension)
  testAbs "${conf}${extension}" && return 0
  # conf is absolute file
  testAbs "${conf}" && return 0

  # relative to where script is executed (including extension)
  if [[ -n "${CURRENT_DIR+xxx}" ]]; then
    testAbs "$(File::concatenatePath "${CURRENT_DIR}" "${confFolder}")/${conf}${extension}" && return 0
  fi
  # from home/.bash-tools/<confFolder>
  testAbs "$(File::concatenatePath "${HOME}/.bash-tools" "${confFolder}")/${conf}${extension}" && return 0

  if [[ -n "${ROOT_DIR+xxx}" ]]; then
    # from framework conf/<confFolder> (including extension)
    testAbs "$(File::concatenatePath "${ROOT_DIR}/conf" "${confFolder}")/${conf}${extension}" && return 0

    # from framework conf/<confFolder>
    testAbs "$(File::concatenatePath "${ROOT_DIR}/conf" "${confFolder}")/${conf}" && return 0
  fi

  # file not found
  Log::displayError "conf file '${conf}' not found"

  return 1
}

# Public: list the conf files list available in bash-tools/conf/<conf> folder
# and those overridden in ${HOME}/.bash-tools/<conf> folder
# **Arguments**:
# * $1 confFolder the directory name (not the path) to list
# * $2 the extension (sh by default)
# * $3 the indentation ('       - ' by default) can be any string compatible with sed not containing any /
#
# **Output**: list of files without extension/directory
# eg:
#       - default.local
#       - default.remote
#       - localhost-root
Profiles::getConfMergedList() {
  local confFolder="$1"
  local extension="${2:-sh}"
  local indentStr="${3:-       - }"

  local DEFAULT_CONF_DIR="${ROOT_DIR}/conf/${confFolder}"
  local HOME_CONF_DIR="${HOME}/.bash-tools/${confFolder}"

  (
    if [[ -d "${DEFAULT_CONF_DIR}" ]]; then
      Profiles::list "${DEFAULT_CONF_DIR}" "" "${extension}" "-type f" "${indentStr}"
    fi
    if [[ -d "${HOME_CONF_DIR}" ]]; then
      Profiles::list "${HOME_CONF_DIR}" "" "${extension}" "-type f" "${indentStr}"
    fi
  ) | sort | uniq
}

# lazy initialization
declare -g BASH_FRAMEWORK_INITIALIZED="0"
declare -g BASH_FRAMEWORK_CACHED_ENV_FILE
declare -g BASH_FRAMEWORK_DEFAULT_ENV_FILE

# load variables in order(from less specific to more specific) from :
# - ${ROOT_DIR}/src/Env/testsData/.env file
# - ${ROOT_DIR}/conf/.env file if exists
# - ~/.env file if exists
# - ~/.bash-tools/.env file if exists
# - BASH_FRAMEWORK_ENV_FILEPATH=<fullPathToEnvFile or empty if no file to be loaded>
Env::load() {
  if [[ "${BASH_FRAMEWORK_INITIALIZED}" = "1" ]]; then
    return 0
  fi
  BASH_FRAMEWORK_CACHED_ENV_FILE="$(mktemp -p "${TMPDIR:-/tmp}" -t "env_vars.XXXXXXX")"
  BASH_FRAMEWORK_DEFAULT_ENV_FILE="$(mktemp -p "${TMPDIR:-/tmp}" -t "default_env_file.XXXXXXX")"
  # shellcheck source=src/Env/testsData/.env
  (
    echo "BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL:-0}"
    echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL:-3}"
    echo "BASH_FRAMEWORK_LOG_FILE=${BASH_FRAMEWORK_LOG_FILE:-${ROOT_DIR}/logs/${SCRIPT_NAME}.log}"
    echo "BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION=${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION:-5}"
  ) >"${BASH_FRAMEWORK_DEFAULT_ENV_FILE}"

  (
    # reset temp file
    echo >"${BASH_FRAMEWORK_CACHED_ENV_FILE}"

    # ensure all sourced variables will be exported
    set -o allexport

    # list .env files that need to be loaded
    local -a files=()
    if [[ -f "${BASH_FRAMEWORK_DEFAULT_ENV_FILE}" ]]; then
      files+=("${BASH_FRAMEWORK_DEFAULT_ENV_FILE}")
    fi
    if [[ -f "${ROOT_DIR}/conf/.env" && -r "${ROOT_DIR}/conf/.env" ]]; then
      files+=("${ROOT_DIR}/conf/.env")
    fi
    if [[ -f "${HOME}/.env" && -r "${HOME}/.env" ]]; then
      files+=("${HOME}/.env")
    fi
    local file
    for file in "$@"; do
      if [[ -f "${file}" && -r "${file}" ]]; then
        files+=("${file}")
      fi
    done
    # import custom .env file
    if [[ -n "${BASH_FRAMEWORK_ENV_FILEPATH+xxx}" ]]; then
      # load BASH_FRAMEWORK_ENV_FILEPATH
      if [[ -f "${BASH_FRAMEWORK_ENV_FILEPATH}" && -r "${BASH_FRAMEWORK_ENV_FILEPATH}" ]]; then
        files+=("${BASH_FRAMEWORK_ENV_FILEPATH}")
      else
        Log::displayWarning "env file not not found - ${BASH_FRAMEWORK_ENV_FILEPATH}"
      fi
    fi

    # add all files added as parameters
    files+=("$@")

    # source each file in order
    local file
    for file in "${files[@]}"; do
      # shellcheck source=src/Env/testsData/.env
      source "${file}" || {
        Log::displayWarning "Cannot load '${file}'"
      }
    done

    # copy only the variables to the tmp file
    local varName
    while IFS=$'\n' read -r varName; do
      echo "${varName}='${!varName}'" >>"${BASH_FRAMEWORK_CACHED_ENV_FILE}"

      # using awk deduce all variables that need to be copied in tmp file
      #   from less specific file to the most
    done < <(awk -F= '!a[$1]++' "${files[@]}" | grep -v '^$\|^\s*\#' | cut -d= -f1)
    set +o allexport
  ) || exit 1

  # Finally load the temp file to make the variables available in current script
  set -o allexport
  # shellcheck source=src/Env/testsData/.env
  source "${BASH_FRAMEWORK_CACHED_ENV_FILE}"

  export BASH_FRAMEWORK_INITIALIZED=1

  set +o allexport
}

File::concatenatePath() {
  local basePath="${1}"
  local subPath=${2}
  local fullPath="${basePath:+${basePath}/}${subPath}"

  realpath -m "${fullPath}" 2>/dev/null
}

# Display message using debug color (grey)
# @param {String} $1 message
Log::displayDebug() {
  echo -e "${__DEBUG_COLOR}DEBUG   - ${1}${__RESET_COLOR}" >&2
  Log::logDebug "$1"
}

# Display message using error color (red)
# @param {String} $1 message
Log::displayError() {
  echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}" >&2
  Log::logError "$1"
}

# Display message using info color (bg light blue/fg white)
# @param {String} $1 message
Log::displayHelp() {
  echo -e "${__HELP_COLOR}HELP    - ${1}${__RESET_COLOR}" >&2
  Log::logHelp "$1"
}

# Display message using info color (bg light blue/fg white)
# @param {String} $1 message
Log::displayInfo() {
  echo -e "${__INFO_COLOR}INFO    - ${1}${__RESET_COLOR}" >&2
  Log::logInfo "$1"
}

# Display message using skip color (yellow)
# @param {String} $1 message
Log::displaySkipped() {
  echo -e "${__SKIPPED_COLOR}SKIPPED - ${1}${__RESET_COLOR}" >&2
  Log::logSkipped "$1"
}

# Display message using success color (bg green/fg white)
# @param {String} $1 message
Log::displaySuccess() {
  echo -e "${__SUCCESS_COLOR}SUCCESS - ${1}${__RESET_COLOR}" >&2
  Log::logSuccess "$1"
}

# Display message using warning color (yellow)
# @param {String} $1 message
Log::displayWarning() {
  echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}" >&2
  Log::logWarning "$1"
}

# log message to file
# @param {String} $1 message
Log::logDebug() {
  Log::logMessage "DEBUG" "$@"
}

# log message to file
# @param {String} $1 message
Log::logError() {
  Log::logMessage "ERROR" "$@"
}

# log message to file
# @param {String} $1 message
Log::logFatal() {
  Log::logMessage "FATAL" "$@"
}

# log message to file
# @param {String} $1 message
Log::logHelp() {
  Log::logMessage "HELP" "$@"
}

# log message to file
# @param {String} $1 message
Log::logInfo() {
  Log::logMessage "INFO" "$@"
}

# log message to file
# @param {String} $1 message
Log::logSkipped() {
  Log::logMessage "SKIPPED" "$@"
}

# log message to file
# @param {String} $1 message
Log::logSuccess() {
  Log::logMessage "SUCCESS" "$@"
}

# log message to file
# @param {String} $1 message
Log::logWarning() {
  Log::logMessage "WARNING" "$@"
}

# To be called before logging in the log file
# @param $1 log file name
# @param $2 maximum number of log files
Log::rotate() {
  local FILENAME="$1"
  local MAX_LOG="${2:-5}"
  for i in $(seq $((MAX_LOG - 1)) -1 1); do
    Log::displayInfo "Log rotation ${FILENAME}.${i} to ${FILENAME}.$((i + 1))"
    mv "${FILENAME}."{"${i}","$((i + 1))"} &>/dev/null || true
  done
  if mv "${FILENAME}" "${FILENAME}.1" &>/dev/null; then
    Log::displayInfo "Log rotation ${FILENAME} to ${FILENAME}.1"
  fi
}

# Public: list files of dir with given extension and display it as a list one by line
#
# @param {String} dir $1 the directory to list
# @param {String} prefix $2 the profile file prefix (default: "")
# @param {String} ext $3 the extension
# @param {String} findOptions $4 find options, eg: -type d
# @paramDefault {String} findOptions $4 '-type f'
# @param {String} indentStr $5 the indentation can be any string compatible with sed not containing any /
# @paramDefault {String} indentStr $5 '       - '
# @output list of files without extension/directory
# eg:
#       - default.local
#       - default.remote
#       - localhost-root
# @return 1 if directory does not exists
Profiles::list() {
  local dir="$1"
  local prefix="${2:-}"
  local ext="${3}"
  local findOptions="${4--type f}"
  local indentStr="${5-       - }"

  if [[ ! -d "${dir}" ]]; then
    Log::displayError "Directory ${dir} does not exist"
  fi
  if [[ -n "${ext}" && "${ext:0:1}" != "." ]]; then
    ext=".${ext}"
  fi
  (
    # shellcheck disable=SC2086
    cd "${dir}" &&
      find . -maxdepth 1 ${findOptions} -name "${prefix}*${ext}" |
      sed -E "s#^\./${prefix}##g" |
        sed -E "s#${ext}\$##g" | sort | sed -E "s#^#${indentStr}#"
  )
}

# Internal: common log message
#
# **Arguments**:
# * $1 - message's level description
# * $2 - message
# **Output**:
# [date]|[levelMsg]|message
#
# **Examples**:
# <pre>
# 2020-01-19 19:20:21|ERROR  |log error
# 2020-01-19 19:20:21|SKIPPED|log skipped
# </pre>
Log::logMessage() {
  local levelMsg="$1"
  local msg="$2"
  local date

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    date="$(date '+%Y-%m-%d %H:%M:%S')"
    printf "%s|%7s|%s\n" "${date}" "${levelMsg}" "${msg}" >>"${BASH_FRAMEWORK_LOG_FILE}"
  fi
}

# FUNCTIONS

Env::load

# disable display methods following display level
if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_DEBUG)); then
  Log::displayDebug() { :; }
fi
if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_INFO)); then
  Log::displayHelp() { :; }
  Log::displayInfo() { :; }
  Log::displaySkipped() { :; }
  Log::displaySuccess() { :; }
fi
if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_WARNING)); then
  Log::displayWarning() { :; }
fi
if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_ERROR)); then
  Log::displayError() { :; }
fi
# disable log methods following log level
if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_DEBUG)); then
  Log::logDebug() { :; }
fi
if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_INFO)); then
  Log::logHelp() { :; }
  Log::logInfo() { :; }
  Log::logSkipped() { :; }
  Log::logSuccess() { :; }
fi
if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_WARNING)); then
  Log::logWarning() { :; }
fi
if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_ERROR)); then
  Log::logError() { :; }
fi

if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
  if [[ -z "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
    BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
    export BASH_FRAMEWORK_LOG_LEVEL
  elif [[ ! -f "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
    if ! mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" 2>/dev/null; then
      BASH_FRAMEWORK_LOG_LEVEL=__LEVEL_OFF
      Log::displayWarning "Log dir cannot be created $(dirname "${BASH_FRAMEWORK_LOG_FILE}")"
    fi
    if ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null; then
      BASH_FRAMEWORK_LOG_LEVEL=__LEVEL_OFF
      Log::displayWarning "Log file '${BASH_FRAMEWORK_LOG_FILE}' cannot be created"
    fi
  fi
  Log::displayInfo "Logging to file ${BASH_FRAMEWORK_LOG_FILE}"
  if ((BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION > 0)); then
    Log::rotate "${BASH_FRAMEWORK_LOG_FILE}" "${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION}"
  fi
fi

BASH_FRAMEWORK_ENV_FILEPATH=${HOME}/.bash-tools/.env

#default values
SCRIPT_VERSION="0.1"
SKIN="default"

# Usage info
showHelp() {
  local skinList=""
  skinList="$(Profiles::getConfMergedList "mysql2pumlSkins" ".puml")"

  cat <<EOF
${__HELP_TITLE}Description:${__HELP_NORMAL} convert mysql dump sql schema to plantuml format

${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} [-h|--help] prints this help and exits
${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} [-v|--version] prints the version and exits
${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} [-s|--skin skin] inputSqlFile

  --help,-h      : prints this help and exits
  --version,-v   : display version and exit
  --skin,-s skin : (optional) header configuration of the plant uml file (default: default)
  inputSqlFile   : sql filepath to parse

${__HELP_TITLE}Examples${__HELP_NORMAL}
mysql2puml dump.dql

mysqldump --skip-add-drop-table --skip-add-locks --skip-disable-keys --skip-set-charset --user=root --password=root --no-data skills | mysql2puml

${__HELP_TITLE}List of available skins:${__HELP_NORMAL}
${skinList}

${__HELP_TITLE}Author:${__HELP_NORMAL}
[François Chastanet](https://github.com/fchastanet)

${__HELP_TITLE}License:${__HELP_NORMAL}
MIT License

Copyright (c) 2022 François Chastanet
EOF
}

showVersion() {
  echo "$(basename "$0") Version: ${SCRIPT_VERSION}"
}

# read command parameters
# $@ is all command line parameters passed to the script.
# -o is for short options like -h
# -l is for long options with double dash like --help
# the comma separates different long options
options=$(getopt -l help,version,skin: -o hvs: -- "$@" 2>/dev/null) || {
  showHelp
  Log::fatal "invalid options specified"
}

eval set -- "${options}"
while true; do
  case $1 in
    -h | --help)
      showHelp
      exit 0
      ;;
    --version | -v)
      showVersion
      exit 0
      ;;
    --skin | -s)
      shift
      SKIN="$1"
      ;;
    --)
      shift || true
      break
      ;;
    *)
      showHelp
      Log::fatal "invalid argument $1"
      ;;
  esac
  shift || true
done
shift $((OPTIND - 1)) || true

sqlFile="${1:-}"
shift || true
if (($# > 0)); then
  showHelp
  Log::fatal "too much arguments provided"
fi

absSkinFile="$(Profiles::getAbsoluteConfFile "mysql2pumlSkins" "${SKIN}" "puml")" ||
  Log::fatal "the skin ${SKIN} does not exist"

if [[ -n "${sqlFile}" ]]; then
  if [[ ! -f "${sqlFile}" ]]; then
    Log::fatal "file ${sqlFile} does not exist"
  fi
  exec 3<"${sqlFile}"
elif [[ ! -t 0 ]]; then
  exec 3<&0
else
  Log::fatal "No sql file provided..."
fi

awkScript="$(
  cat <<'EOF'
# =========================================================================
#
# mysql2puml - SQL DDL to markdown converter
#
# Invocation/Execution:
#   awk -f mysql2puml.awk skinFile < inputFile > outputFile
#   DEBUG=1 awk -f mysql2puml.awk skinFile < inputFile > outputFile
#
# Supports
#   PlantUML format
# =========================================================================

function debug(first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth) {
    if (DEBUG == 1) print("DEBUG - ", first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth) > "/dev/stderr"
}

# =========================================================================

function uml_start()
{
    if (!skinFile) {
        print("skinFile parameter missing") > "/dev/stderr"
        exit 1
    }
    while ((getline tmp < skinFile) > 0) {
        if (match(tmp, /@enduml/)) {
            break
        }
        print(tmp)
    }
    print "' entities"
}

# =========================================================================

function uml_end()
{
    print "@enduml"
}

# =========================================================================

function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
function trim(s) { return rtrim(ltrim(s)); }

# =========================================================================

function column_weight(column)
{
    return (columnsDetails[column ",pk"] == "1" ? 8 : 0) \
        + (columnsDetails[column ",fk"] == "1" ? 4 : 0) \
        + (columnsDetails[column ",unique"] == "1" ? 2 : 0) \
        + (columnsDetails[column ",null"] == "0" ? 1 : 0)
}

function column_sort(i1, column1, i2, column2)
{
    weight1 = column_weight(column1)
    weight2 = column_weight(column2)
    if (weight1 == weight2) {
        l = tolower(column1)
        r = tolower(column2)

        if (l < r) {
            return -1
        } else if (l == r) {
            return 0
        } else {
            return 1
        }
    } else {
        return weight2 - weight1
    }
}

# =========================================================================

function uml_table(createTable)
# DDL to plantuml
# CREATE TABLE `core_customer` (`id` int(11) NOT NULL AUTO_INCREMENT, `instance_name` varchar(128) NOT NULL, PRIMARY KEY (`id`), UNIQUE KEY `instance_name` (`instance_name`) ) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
# CREATE TABLE `core_learner_skill` (`id` int(11) NOT NULL AUTO_INCREMENT, `customer_id` int(10) unsigned NOT NULL, PRIMARY KEY (`id`), KEY `customer_id_684f904f_fk_core_learner_id` (`customer_id`), CONSTRAINT `customer_id_684f904f_fk_core_customer_id` FOREIGN KEY (`customer_id`) REFERENCES `core_customer` (`id`)) ENGINE=InnoDB AUTO_INCREMENT=415 DEFAULT CHARSET=utf8;
#table( user ) {
#  primary_key( id ): UUID
#  column( isActive ): BOOLEAN
#}
#LearnerSkill "0..*" --> "1" Learner : "learner_id"
{
    debug("uml_table", createTable)
    split(createTable,lines,"\n")
    columnIdx=0
    for (line in lines) {
        debug(lines[line])
        if (match(lines[line], /CREATE TABLE `([^`]+)` \(/, arr)) {
            debug("TABLE ", lines[line])
            tableName = arr[1]
        } else if (match(lines[line], /PRIMARY KEY \(([^)]+)\)/, arr)) {
            # PRIMARY KEY (`id`),
            debug("PK ", lines[line])
            split(arr[1],primaryKeys,",")
            for (i in primaryKeys) {
                if(match(primaryKeys[i], /[ ]?`([^`]+)+`[ ]?/, arr)) {
                    columnsDetails[arr[1] ",pk"] = "1"
                }
            }
        } else if (match(lines[line], /CONSTRAINT `[^`]+` FOREIGN KEY \(`([^`]+)`\) REFERENCES `([^`]+)` \(`([^`]+)`\)/, arr)) {
            # CONSTRAINT `core_learner_customer_id_6d356da8_fk_core_customer_id` FOREIGN KEY (`customer_id`) REFERENCES `core_customer` (`id`)
            debug("Constraint ", lines[line])
            columnName=arr[1]
            columnsDetails[columnName ",fk"]="1"
            columnsDetails[columnName ",fkTable"]=arr[2]
            columnsDetails[columnName ",fkColumn"]=arr[3]
        } else if (match(lines[line], /UNIQUE KEY `[^`]+` \(([^)]+)\)/, arr)) {
            # UNIQUE KEY `unique_learner_by_customer` (`external_id`,`customer_id`),
            debug("Unique Key ", lines[line])
            split(arr[1],uniqueKeys,",")
            for (i in uniqueKeys) {
                if(match(uniqueKeys[i], /[ ]?`([^`]+)+`[ ]?/, arr)) {
                    columnsDetails[arr[1] ",unique"] = "1"
                }
            }
        } else if (match(lines[line], /`([^`]+)` (([A-Za-z]+)((\([^)]+\)|)[ ]?(unsigned|)))[ ]?(NOT NULL|NULL|)[ ]?(AUTO_INCREMENT|)/, arr)) {
            # `id` int(11) NOT NULL AUTO_INCREMENT
            # `test` int(11) unsigned NULL
            # `instance_name` varchar(128) NOT NULL
            debug("Column ", lines[line])
            columnName = arr[1]
            columns[columnIdx++] = columnName
            columnType=arr[2]
            gsub(/\(|\)/, "", columnType)
            columnsDetails[columnName ",type"] = columnType  # eg: int(11) unsigned => int11 unsigned
            columnsDetails[columnName ",null"] = arr[7]=="NOT NULL" ? "0" : "1" # eg: NOT NULL
            columnsDetails[columnName ",autoIncrement"] = arr[8] # eg: AUTO_INCREMENT
        }
    }

    if (DEBUG == 1) {
        debug("Table ", tableName)
        for (i in columns) debug("column ", i, " ", columns[i])
        for (i in columnsDetails) debug("match ", i, " ", columnsDetails[i])
    }
    asort(columns, columns, "column_sort")
    if (DEBUG == 1) {
        debug("***************************************************************")
        debug("Columns order after sort")
        for (i in columns) debug("column ", i, " ", columns[i], column_weight(columns[i]))
    }
    printf("Table(%s) {\n", tableName )
    for(i in columns) {
        columnName=columns[i]
        # column($name, $type, $null="", $pk="", $fk="", $unique="")
        printf( \
            "  column(\"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\")\n", \
            columnName, \
            trim(columnsDetails[columnName ",type"]), \
            (columnsDetails[columnName ",null"] == "1") ? "NULL" : "NOT NULL", \
            (columnsDetails[columnName ",pk"] == "1") ? "PK" : "", \
            (columnsDetails[columnName ",fkTable"] == "1") ? "FK" : "", \
            (columnsDetails[columnName ",unique"] == "1") ? "UNIQUE" : "" \
        )
    }
    print("}")

    for(i in columns) {
        columnName=columns[i]
        if (columnsDetails[columnName ",fk"] == "1") {
            #LearnerSkill "0..*" --> "1" Learner : "learner_id"
            printf("%s \"0..*\" --> \"1\" %s : \"%s\"\n", tableName, columnsDetails[columnName ",fkTable"], columnsDetails[columnName ",fkColumn"] )
        }
    }
    print("")

    delete columnsDetails
    delete columns
}

# =========================================================================
function uml_parse_line(currentLine)
{
    if (length(currentLine) < 2 || match(currentLine, "^--") > 0) {
        return
    }

    if (match(currentLine,";")>0) {
        sqlLine = sqlLine "\n" currentLine
        debug(sqlLine)
        if (match(sqlLine,"CREATE TABLE") > 0) {
            uml_table(sqlLine)
        }
        sqlLine=""
    }
    else {
        sqlLine = sqlLine "\n" currentLine
    }
}

# =========================================================================

BEGIN {
    DEBUG=ENVIRON["DEBUG"]
    skinFile=ARGV[1]
    debug("Skin file", skinFile)
    uml_start()
}

{
    line=$0
    uml_parse_line(line)
}

END {
    uml_end()
    exit 0
    # fake call occurring after exit to remove warning about unused function
    column_sort()
}
# =========================================================================
EOF
)"
awk --source "${awkScript}" "${absSkinFile}" - <&3
