---
# Lint the code base and launch unit test at each push or pull request
name: Lint and test
on:
  push:
  workflow_dispatch:

jobs:
  linters:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: lint
          status: pending

      - name: Install vendors
        run: |
          set -exo pipefail
          ./bin/installRequirements

      - name: Linting - Shellcheck
        run: |
          set -exo pipefail
          ./vendor/bash-tools-framework/bin/shellcheckLint --source-path=SCRIPTDIR --external-sources | \
            tee logs/shellcheck-checkstyle.xml

      - name: Linting - Awk
        run: |
          set -exo pipefail
          ./vendor/bash-tools-framework/bin/awkLint | tee logs/awk-checkstyle.xml

      - name: build bin files + check md5
        run: |
          set -exo pipefail
          ./.github/workflows/buildBinFiles.sh 2>&1 | tee logs/buidBinFiles.log

      - name: Checkstyle aggregation
        uses: jwgmeligmeyling/checkstyle-github-action@master
        with:
          path: 'logs/*-checkstyle.xml'

      - name: Archive results
        uses: actions/upload-artifact@v3
        with:
          name: linter-reports
          path: |
            logs/*.xml
            logs/*.log

      - uses: ouzi-dev/commit-status-updater@v2
        if: always()
        with:
          name: lint
          status: ${{ job.status }}

  tests:
    needs: linters
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
          - alpine
        bashTarVersion:
          - '4.4'
          - '5.0'
          - '5.1'
        include:
          - vendor: ubuntu
            bashImage: ubuntu:20.04
            options: -j 8
          - vendor: alpine
            bashImage: bash
            options: -j 2
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{matrix.vendor}}-${{matrix.bashTarVersion}}-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: pending

      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key:
            scrasnups-docker-cache-{hash}-${{matrix.vendor}}-${{matrix.bashTarVersion}}-${{
            github.sha }}
          restore-keys: |
            scrasnups-docker-cache-

      # - name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .docker
      #     file: .docker/DockerfileUser
      #     push: false
      #     build-args: |
      #       BASH_IMAGE=scrasnups/build:bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
      #       SKIP_USER=1
      #     tags: |
      #       scrasnups/build:bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
      #       bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}-user:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: run tests using existing docker image
        run: |
          set -exo pipefail
          docker build \
            --file .docker/DockerfileUser \
            --tag bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}-user:latest \
            --build-arg BASH_IMAGE=scrasnups/build:bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}} \
            --build-arg SKIP_USER=1 \
            --build-arg USER_ID="$(id -u)" \
            --build-arg GROUP_ID="$(id -g)" \
            .docker

          ./bin/installDevRequirements

          docker run \
            --rm -w /bash -v "$(pwd):/bash" \
            --user "$(id -u):$(id -g)" \
            "bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}-user:latest" \
            vendor/bats/bin/bats ${{matrix.options}} --report-formatter junit -o logs -r tests

      # -
      #   # Temp fix
      #   # https://github.com/docker/build-push-action/issues/252
      #   # https://github.com/moby/buildkit/issues/1896
      #   name: Move cache
      #   run: |
      #     set -x
      #     set -o errexit
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: logs/report.xml
          check_name:
            'Unit Test Results ${{matrix.vendor}} ${{matrix.bashTarVersion}}'

      - uses: ouzi-dev/commit-status-updater@v2
        if: always()
        with:
          name: build bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: ${{ job.status }}

  buildResults:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Final Build Results
    needs: [linters, tests]
    steps:
      # run this action to get the workflow conclusion
      # You can get the conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: technote-space/workflow-conclusion-action@v3

      # run other action with the workflow conclusion
      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build
          # neutral, success, skipped, cancelled, timed_out, action_required, failure
          status: ${{ env.WORKFLOW_CONCLUSION }}
