---
# Lint the code base and launch unit test at each push or pull request
name: Lint and test
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  linters:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install vendors
        run: ./bin/installRequirements

      - name: Linting - Dockerfile
        run: ./bin/dockerLint | tee logs/docker-checkstyle.xml

      - name: Linting - Shellcheck
        run: ./bin/shellcheckLint | tee logs/shellcheck-checkstyle.xml

      - name: Linting - Awk
        run: ./bin/awkLint | tee logs/awk-checkstyle.xml

      - name: Checkstyle aggregation
        uses: jwgmeligmeyling/checkstyle-github-action@master
        with:
          path: 'logs/*-checkstyle.xml'

      - name: Archive results
        uses: actions/upload-artifact@v3
        with:
          name: linter-reports
          path: |
            logs/*.xml
            logs/*.log

      - name: set github status lint success
        if: success()
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'Lint'
          description: 'Linters success'
          state: 'success'
          sha: ${{github.event.pull_request.head.sha || github.sha}}

      - name: set github status lint failure
        if: failure()
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'Lint'
          description: 'Linters failures'
          state: 'failure'
          sha: ${{github.event.pull_request.head.sha || github.sha}}

  buildDockerImages:
    needs: linters
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
          - alpine
        bashTarVersion:
          - '4.4'
          - '5.0'
          - '5.1'
        include:
          - vendor: ubuntu
            bashImage: ubuntu:20.04
          - vendor: alpine
            bashImage: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull/Build/Push docker image
        env:
          BRANCH: ${{ github.ref }}
          PUSH: push
        run:
          ./bin/buildPushDockerImages "${{matrix.vendor}}"
          "${{matrix.bashTarVersion}}" "${{matrix.bashImage}}" "${BRANCH}"
          "${PUSH}"
      - name: Check image
        run: |
          docker run --rm \
          "bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}" bash \
          --version

  testDoc:
    needs: buildDockerImages
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
        bashTarVersion:
          - '5.1'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: docker pull image
        run: docker pull scrasnups/build:bash-tools-ubuntu-5.1
      - name: Check if doc up to date
        run: |
          ./bin/doc

  tests:
    needs: buildDockerImages
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
          - alpine
        bashTarVersion:
          - '4.4'
          - '5.0'
          - '5.1'
        include:
          - vendor: ubuntu
            bashImage: ubuntu:20.04
          - vendor: alpine
            bashImage: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: docker pull image
        run:
          docker pull scrasnups/build:bash-tools-${{ matrix.vendor }}-${{
          matrix.bashTarVersion }}
      - name: run unit tests
        run: |
          ./bin/installDevRequirements
          # shellcheck disable=SC2266
          VENDOR="${{ matrix.vendor }}" \
          BASH_TAR_VERSION="${{ matrix.bashTarVersion }}" \
          BASH_IMAGE="${{ matrix.bashImage }}" \
          SKIP_BUILD=0 \
          SKIP_USER=1 \
          ./bin/test --report-formatter junit -o logs -r tests

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: logs/report.xml
